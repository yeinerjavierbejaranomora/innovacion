1720923571
waR3U4bTeM%3Ab31d53542388d021869bf6330191aabf-c383b897ee141e9a29137f499ba2cd4a
s:192144:"O:33:"phpDocumentor\Reflection\Php\File":14:{s:43:" phpDocumentor\Reflection\Php\File docBlock";N;s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"c383b897ee141e9a29137f499ba2cd4a";s:39:" phpDocumentor\Reflection\Php\File name";s:18:"MafiController.php";s:39:" phpDocumentor\Reflection\Php\File path";s:39:"app/Http/Controllers/MafiController.php";s:41:" phpDocumentor\Reflection\Php\File source";s:91552:"<?php

namespace App\Http\Controllers;

use App\Models\AlertasTempranas;
use App\Models\Estudiante;
use App\Models\IndiceCambiosMafi;
use App\Models\LogAplicacion;
use App\Models\Mafi;
use App\Models\MafiReplica;
use App\Models\MateriasPorVer;
use App\Models\Periodo;
use Exception;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class MafiController extends Controller
{
    //

    public function __construct()
    {
        $this->middleware('auth');
    }

    public function inicioMafi()
    {
        return view('vistas.admin.mafi');
    }

    public function getDataMafi()
    {
        /// para activar el perodo activo en la base de datos
        $this->periodo();
        /** Año y Mes Actual*/
        $yearActual = date('Y');
        $mesActual =  date('n');
        /** Consulta para traer los periodos por el año actual*/
        $periodos = Periodo::all()->where('year', $yearActual);
        //return $periodos;
        /** Recorrer el array de los periodos optenidos */
        foreach ($periodos as $periodo) :
            /** Comparar de los periodos cual corresponde con mes actual */
            if ($periodo->mes == $mesActual) :
                /** Se crea variables para cada periodo*/
                $formacionContinua = $periodo->formacion_continua;
                $pregradoCuatrimestral = $periodo->year . $periodo->Pregrado_cuatrimestral;
                $pregradoSemestral = $periodo->year . $periodo->Pregrado_semestral;
                $especializacion = $periodo->year . $periodo->especializacion;
                $maestria = $periodo->year . $periodo->maestria;
            endif;
        endforeach;

        $log = DB::table('logAplicacion')->where([['accion', '=', 'Insert'], ['tabla_afectada', '=', 'datosMafiReplica']])->orderBy('id', 'desc')->first();
        //return $log->idFin;
        if (empty($log)) :
            /** Consulta de los datos tabla datMafi */
            $data = DB::table('datosMafi')
                ->where('estado', '=', 'Activo')
                ->whereIn('sello', ['TIENE RETENCION', 'TIENE SELLO FINANCIERO'])
                //->where('autorizado_asistir', 'LIKE', 'ACTIVO%')
                //->whereIn('periodo', [$pregradoCuatrimestral, $pregradoSemestral, $especializacion, $maestria])
                ->orderBy('id')
                ->get()
                ->chunk(200);

        else :
            $data = DB::table('datosMafi')
                ->where('estado', '=', 'Activo')
                ->whereIn('sello', ['TIENE RETENCION', 'TIENE SELLO FINANCIERO'])
                //->where('autorizado_asistir', 'LIKE', 'ACTIVO%')
                //->whereIn('periodo', [$pregradoCuatrimestral, $pregradoSemestral, $especializacion, $maestria])
                ->where('id', '>', $log->idFin)
                ->orderBy('id')
                ->get()
                ->chunk(200);

        endif;

        if (!empty($data[0])) :
            $numeroRegistros = 0;
            $primerId = $data[0][0]->id;
            $ultimoRegistroId = 0;
            $fechaInicio = date('Y-m-d H:i:s');
            foreach ($data as $keys => $estudiantes) :
                foreach ($estudiantes as $key => $value) :
                    //dd($value->sello);
                    if ($value->sello === 'TIENE RETENCION') :
                        $consultaActivoPlataforma = DB::table('datosMafi')->where([['id', '=', $value->id], ['sello', '=', $value->sello]])->whereIn('autorizado_asistir', ['ACTIVO EN PLATAFORMA', 'ACTIVO EN PLATAFORMA ICETEX'])->first();
                        if ($consultaActivoPlataforma) :
                            $insertar = MafiReplica::create([
                                'idbanner' => $value->idbanner,
                                'primer_apellido' => $value->primer_apellido,
                                'programa' => $value->programa,
                                'codprograma' => $value->codprograma,
                                'cadena' => $value->cadena,
                                'periodo' => $value->periodo,
                                'estado' => $value->estado,
                                'tipoestudiante' => $value->tipoestudiante,
                                'ruta_academica' => $value->ruta_academica,
                                'sello' => $value->sello,
                                'operador' => $value->operador,
                                'autorizado_asistir' => $value->autorizado_asistir,
                            ]);
                            $numeroRegistros++;
                        endif;
                    else :
                        $insertar = MafiReplica::create([
                            'idbanner' => $value->idbanner,
                            'primer_apellido' => $value->primer_apellido,
                            'programa' => $value->programa,
                            'codprograma' => $value->codprograma,
                            'cadena' => $value->cadena,
                            'periodo' => $value->periodo,
                            'estado' => $value->estado,
                            'tipoestudiante' => $value->tipoestudiante,
                            'ruta_academica' => $value->ruta_academica,
                            'sello' => $value->sello,
                            'operador' => $value->operador,
                            'autorizado_asistir' => $value->autorizado_asistir,
                        ]);
                        $numeroRegistros++;
                    endif;

                    $ultimoRegistroId = $value->id;
                    $idBannerUltimoRegistro = $value->idbanner;
                endforeach;
            endforeach;
            $fechaFin = date('Y-m-d H:i:s');

            //return "Fecha inicio: " .$fechaInicio. ', Fecha Fin '. $fechaFin;
            $insertLog = LogAplicacion::create([
                'idInicio' => $primerId,
                'idFin' => $ultimoRegistroId,
                'fechaInicio' => $fechaInicio,
                'fechaFin' => $fechaFin,
                'accion' => 'Insert',
                'tabla_afectada' => 'datosMafiReplica',
                'descripcion' => 'Se realizo la insercion en la tabla datosMafiRelica desde la tabla datosMafi, iniciando en el id ' . $primerId . ' y terminando en el id ' . $ultimoRegistroId . ',insertando ' . $numeroRegistros . ' registros',
            ]);

            $insertIndiceCambio = IndiceCambiosMafi::create([
                'idbanner' => $idBannerUltimoRegistro,
                'accion' => 'Insert',
                'descripcion' => 'Se realizo la insercion en la tabla datosMafiRelica desde la tabla datosMafi, iniciando en el id ' . $primerId . ' y terminando en el id ' . $ultimoRegistroId . ',insertando ' . $numeroRegistros . ' registros',
                'fecha' => date('Y-m-d H:i:s'),
            ]);
            if ($insertLog && $insertIndiceCambio) :
                return "Numero de registros: '.$numeroRegistros.'=> primer id registrado: " . $primerId . ', Ultimo id registrado ' . $ultimoRegistroId;
            endif;
        else :
            return "No hay registros para replicar";
        endif;

        //$contData = count($data);
        /*$contKeys = 0;
        //$data = (array) $data;
        //dd($data);
        $numeroDatos = 200;
        $contadorGeneral = ceil($contData / $numeroDatos);
        dd(array_chunk($data,$contadorGeneral));
        for ($i=0; $i < $contadorGeneral; $i++):

            foreach ($data as $key => $value) {
                if($key === $contKeys):

                    return 'entra';
                else:
                    return 'No entro';
                endif;
            }
        endfor;*/
        /*$data = Mafi::where([['estado','<>','Inactivo']]);
        $dataLongitud = count($data);*/
    }

    public function programarSegundoCiclo(){
        /// para activar el perodo activo en la base de datos
        $periodo = $this->periodo();
        $marcaIngreso = "";
        foreach ($periodo as $key => $value) {
            $marcaIngreso .= (int)$value->periodos . ",";
        }

        // para procesasr las marcas de ingreso en los periodos
        $marcaIngreso = trim($marcaIngreso, ",");
        // Dividir la cadena en elementos individuales
        $marcaIngreso = explode(",", $marcaIngreso);
        // Convertir cada elemento en un número
        $marcaIngreso = array_map('intval', $marcaIngreso);
        $estudiantes = DB::table('estudiantes')
                            ->select('id', 'homologante', 'programa','bolsa','tipo_estudiante')
                            ->where([['id','>',0],['materias_faltantes','=','OK'],['programado_ciclo1','=','OK']])
                            ->whereNull('programado_ciclo2')
                            ->whereIn('marca_ingreso', $marcaIngreso)
                            ->orderBy('id','ASC')
                            ->limit(1000)
                            ->get();
        return $estudiantes;
    }

    public function getDataMafiReplica()
    {
        /**Programar materia de segundo ciclo */
        $estudiantesSC = $this->programarSegundoCiclo();
        foreach($estudiantesSC as $estudiante):
            $fechaInicio = date('Y-m-d H:i:s');
            $primerId = $estudiante->id;
            $ultimoRegistroId = 0;
            $idEstudiante = $estudiante->id;
            $codigoBanner = $estudiante->homologante;
            $programa = $estudiante->programa;
            $ruta = $estudiante->bolsa;
            $materiasPlaneadasConsulta = DB::table('planeacion')
                                        ->select('planeacion.codBanner','planeacion.codMateria')
                                        ->join('mallaCurricular','mallaCurricular.codigoCurso','=','planeacion.codMateria')
                                        ->where([['planeacion.codBanner','=',$codigoBanner],['planeacion.codprograma','=',$programa],['mallaCurricular.codprograma','=',$programa]])
                                        ->get();

            if(!$materiasPlaneadasConsulta):
                echo "Materias planeadas: " . $materiasPlaneadasConsulta . "<br />";
            endif;

            $materiasPlaneadas = [];

            foreach($materiasPlaneadasConsulta as $materiaPlaneada):
                $codMateria = $materiaPlaneada->codMateria;
                array_push($materiasPlaneadas,$codMateria);
                //$materiasPlaneadas = $materiasPlaneadas."'".$codMateria."',";
            endforeach;
            //$materiasPlaneadas = substr($materiasPlaneadas,0,-1);
            //$materiasPlaneadas =$materiasPlaneadas;
            dd($materiasPlaneadas);

            $materiasPorverConsulta = DB::table('materiasPorVer')
                                    ->select('materiasPorVer.codBanner','materiasPorVer.codMateria','materiasPorVer.orden','mallaCurricular.creditos','mallaCurricular.ciclo')
                                    ->join('mallaCurricular','mallaCurricular.codigoCurso','=','materiasPorVer.codMateria')
                                    ->where([['materiasPorVer.codBanner','=',$codigoBanner],['materiasPorVer.codprograma','=',$programa],['mallaCurricular.codprograma','=',$programa]])
                                    ->whereNotIn('materiasPorVer.codMateria',$materiasPlaneadas)
                                    ->orderBy('materiasPorVer.orden','ASC')
                                    ->get();


            $creditosPlaneadosConsulta = DB::table('mallaCurricular')
                                    ->select('planeacion.codBanner', DB::raw('SUM(mallaCurricular.creditos) AS CreditosPlaneados'))
                                    ->join('planeacion', 'planeacion.codMateria', '=', 'mallaCurricular.codigoCurso')
                                    ->where('planeacion.codBanner', '=', $codigoBanner)
                                    ->where([['mallaCurricular.codprograma','=',$programa],['planeacion.codprograma','=',$programa]])
                                    ->groupBy('planeacion.codBanner')
                                    ->first();

            $creditosPlaneados =  $creditosPlaneadosConsulta->CreditosPlaneados == '' ? 0 : $creditosPlaneadosConsulta->CreditosPlaneados;
            $materiasPorVer = '';
            $numeroMateriasPorVer = $materiasPorverConsulta->count();
            if($numeroMateriasPorVer == 0):
                DB::table('estudiantes')->where([['homologante','=',$codigoBanner],['id','=',$idEstudiante]])->update(['programado_ciclo2'=>'OK']);
                $insertAlerta = AlertasTempranas::create([
                    'idbanner' => $codigoBanner,
                    'tipo_estudiante' => $estudiante->tipoestudiante,
                    'desccripcion' => 'El estudiante con idBanner' . $codigoBanner . ' no tiene materias por ver',
                ]);
                echo "Sin  Materias : " . $codigoBanner . "<br />";
            else:
                echo "con  Materias : " . $codigoBanner . "<br />";
                foreach($materiasPorverConsulta as $materia):
                    $codBanner = $materia->codBanner;
                    $codMateria = $materia->codMateria;
                    $creditoMateria = $materia->creditos;
                    $ciclo = $materia->ciclo;
                    dd($materia);
                endforeach;
            endif;
            dd($codigoBanner,$numeroMateriasPorVer);
        endforeach;
        die();
        /**Programar materia de segundo ciclo */
        die();
        /**para programar materias del primer ciclo */
        $programado_ciclo1 = NULL;
        /// para activar el perodo activo en la base de datos
        $periodo = $this->periodo();
        $marcaIngreso = "";
        foreach ($periodo as $key => $value) {
            $marcaIngreso .= (int)$value->periodos . ",";
        }

        // para procesasr las marcas de ingreso en los periodos
        $marcaIngreso = trim($marcaIngreso, ",");
        // Dividir la cadena en elementos individuales
        $marcaIngreso = explode(",", $marcaIngreso);
        // Convertir cada elemento en un número
        $marcaIngreso = array_map('intval', $marcaIngreso);
        $estudiantes = DB::table('estudiantes')
        ->select('id', 'homologante', 'programa', 'bolsa', 'tipo_estudiante')
        ->where('materias_faltantes', '=', 'OK')
        ->where('programado_ciclo1', '=', $programado_ciclo1)
        ->whereNull('programado_ciclo2')
        ->whereIn('marca_ingreso', $marcaIngreso)
        ->orderBy('id', 'asc')
        ->count();

        echo $estudiantes.'<br>';
        if ($estudiantes > 0) :
            $limit = 200;
            $numeroEstudiantes = ceil($estudiantes / $limit);
            //dd($numeroEstudiantes);
            for ($i = 0; $i < $numeroEstudiantes; $i++) :
                $log = DB::table('logAplicacion')->where([['accion', '=', 'Insert-PlaneacionPrimerCiclo'], ['tabla_afectada', '=', 'planeacion']])->orderBy('id', 'desc')->first();
                //dd($log);
                if (empty($log)) :
                    $id = 0;
                else :
                    $id = $log->idFin;
                endif;
                /**consulta de estudinates primer ciclo */
                $estudiantesPC = $this->programarPrimerCiclo($id, $limit, $programado_ciclo1);
                //dd($estudiantesPC->count());
                /**recorrer por cada estudiante  */
                foreach ($estudiantesPC as $estudiante) :
                    $fechaInicio = date('Y-m-d H:i:s');
                    $primerId = $estudiante->id;
                    $ultimoRegistroId = 0;
                    $idEstudiante = $estudiante->id;
                    $codigoBanner = $estudiante->homologante;
                    $programa = $estudiante->programa;
                    $ruta = $estudiante->bolsa;
                    if ($ruta != '') :
                        $ruta = 1;
                    endif;
                    $tipoEstudiante = $estudiante->tipo_estudiante;

                    switch ($tipoEstudiante) {
                        case str_contains($tipoEstudiante, 'TRANSFERENTE'):
                            $tipoEstudiante = 'TRANSFERENTE';
                            break;
                        case str_contains($tipoEstudiante, 'ESTUDIANTE ANTIGUO'):
                            $tipoEstudiante = 'ESTUDIANTE ANTIGUO';
                            break;
                        case str_contains($tipoEstudiante, 'PRIMER INGRESO'):
                            $tipoEstudiante = 'PRIMER INGRESO';
                            break;
                        case str_contains($tipoEstudiante, 'PSEUDO ACTIVOS'):
                            $tipoEstudiante = 'ESTUDIANTE ANTIGUO';
                            break;
                        case str_contains($tipoEstudiante, 'REINGRESO'):
                            $tipoEstudiante = 'ESTUDIANTE ANTIGUO';
                            break;
                        case str_contains($tipoEstudiante, 'INGRESO SINGULAR'):
                            $tipoEstudiante = 'PRIMER INGRESO';
                            break;

                        default:
                            # code...
                            break;
                    }
                    $ciclo = [1, 12];
                    /** */
                    $materiasPorVer = $this->materiasPorVer($codigoBanner, $ciclo, $programa);
                    /**select `planeacion`.`codBanner`, SUM(mallaCurricular.creditos) AS CreditosPlaneados from `mallaCurricular` inner join `planeacion` on `planeacion`.`codMateria` = `mallaCurricular`.`codigoCurso` where `planeacion`.`codBanner` = 100074631 group by `planeacion`.`codBanner` */
                    $numeroCreditos = DB::table('mallaCurricular')
                    ->select('planeacion.codBanner', DB::raw('SUM(mallaCurricular.creditos) AS CreditosPlaneados'))
                    ->join('planeacion', 'planeacion.codMateria', '=', 'mallaCurricular.codigoCurso')
                    ->where('planeacion.codBanner', '=', $codigoBanner)
                        ->groupBy('planeacion.codBanner')
                        ->first();
                    $numeroCreditos = $numeroCreditos == '' ? 0 : $numeroCreditos->CreditosPlaneados;
                    $numeroCreditosC1 = DB::table('mallaCurricular')
                    ->select(DB::raw('SUM(mallaCurricular.creditos) AS screditos'), DB::raw('COUNT(mallaCurricular.creditos) AS ccursos'))
                    ->join('planeacion', 'planeacion.codMateria', '=', 'mallaCurricular.codigoCurso')
                    ->where('planeacion.codBanner', '=', $codigoBanner)
                        ->whereIn('mallaCurricular.ciclo', [1, 12])
                        ->first();

                    $sumaCreditosCiclo1 = $numeroCreditosC1->screditos;
                    $sumaCreditosCiclo1 = $sumaCreditosCiclo1 == '' ? 0 : $sumaCreditosCiclo1;
                    $cuentaCursosCiclo1 = $numeroCreditosC1->ccursos;
                    $cuentaCursosCiclo1 = $cuentaCursosCiclo1 == '' ? 0 : $cuentaCursosCiclo1;



                    /**reglas del negocio */
                    $cicloReglaNegocio = 1;
                    $reglaNegocio = DB::table('reglasNegocio')
                    ->select('creditos', 'materiasPermitidas')
                    ->where([['programa', '=', $programa], ['ruta', '=', $ruta], ['tipoEstudiante', '=', $tipoEstudiante], ['ciclo', '=', $cicloReglaNegocio], ['activo', '=', 1]])
                        ->first();

                    $numeroCreditosPermitidos = $reglaNegocio->creditos;
                    $numeroMateriasPermitidos = $reglaNegocio->materiasPermitidas;
                    $orden = 1;
                    DB::beginTransaction();

                    try {

                        foreach ($materiasPorVer as $materia) :

                            if ($cuentaCursosCiclo1 >= $numeroMateriasPermitidos) :
                                break;
                            endif;
                            $codBanner = $materia->codBanner;
                            $codMateria = $materia->codMateria;
                            $creditoMateria = $materia->creditos;
                            $ciclo = $materia->ciclo;
                            $prerequisitosConsulta = $this->prerequisitos($codMateria, $programa);
                            //dd($programa,$codMateria,$prerequisitosConsulta);
                            $prerequisitos = $prerequisitosConsulta->prerequisito;
                            //dd($prerequisitos);
                            if ($prerequisitos == '' && $ciclo != 2 && $cuentaCursosCiclo1 < $numeroMateriasPermitidos) :
                                /**SELECT codMateria FROM planeacion WHERE codMateria="'.$codMateria.'" AND  	codBanner="'.$codBanner.'"; */
                                $estaPlaneacion = DB::table('planeacion')->select('codMateria')->where([['codMateria', '=', $codMateria], ['codBanner', '=', $codBanner]])->first();
                                //dd($numeroCreditos,$creditoMateria);
                                if ($estaPlaneacion == '' && $numeroCreditos < $numeroCreditosPermitidos) :
                                    $numeroCreditos = $numeroCreditos + $creditoMateria;
                                    $insertPlaneacion = DB::table('planeacion')->insert([
                                        'codBanner' => $codBanner,
                                        'codMateria' => $codMateria,
                                        'orden' => $orden,
                                        'semestre' => '1',
                                        'programada' => '',
                                        'codprograma' => $programa,
                                    ]);
                                    $cuentaCursosCiclo1++;
                                endif;
                            //echo $codBanner . '--' . $codMateria . '--' . $prerequisitos . "--" . $ciclo . '---' . $cuentaCursosCiclo1, '----' . 'sin P' . '<br>';
                            else :
                                $prerequisitos = [$prerequisitos];
                                $estaPlaneacion = DB::table('planeacion')->select('codMateria')->whereIn('codMateria', $prerequisitos)->where('codBanner', '=', $codBanner)->first();
                                $estaPorVer = DB::table('materiasPorVer')->select('codMateria')->whereIn('codMateria', $prerequisitos)->where('codBanner', '=', $codBanner)->orderBy('id', 'ASC')->first();
                                //dd($estaPorVer);
                                //dd($numeroCreditos,$creditoMateria);
                                if ($estaPlaneacion == '' && $estaPorVer == '' && $cuentaCursosCiclo1 < $numeroMateriasPermitidos) :
                                    $numeroCreditos = (int)$numeroCreditos + (int)$creditoMateria;
                                    $insertPlaneacion = DB::table('planeacion')->insert([
                                        'codBanner' => $codBanner,
                                        'codMateria' => $codMateria,
                                        'orden' => $orden,
                                        'semestre' => '1',
                                        'programada' => '',
                                        'codprograma' => $programa,
                                    ]);
                                    $cuentaCursosCiclo1++;
                                endif;
                            //echo $codBanner . '--' . $codMateria . '--' . $prerequisitos2 . "--" . $ciclo . '---' . $cuentaCursosCiclo1 . '----' . 'con P' . '<br>';
                            endif;
                        endforeach;
                        DB::table('estudiantes')->where([['homologante', '=', $estudiante->homologante], ['id', '=', $estudiante->id]])->update(['programado_ciclo1' => 'OK']);
                        $ultimoRegistroId = $estudiante->id;
                        $idBannerUltimoRegistro = $estudiante->homologante;
                        $fechaFin = date('Y-m-d H:i:s');
                        $insertLog = LogAplicacion::create([
                            'idInicio' => $primerId,
                            'idFin' => $ultimoRegistroId,
                            'fechaInicio' => $fechaInicio,
                            'fechaFin' => $fechaFin,
                            'accion' => 'Insert-PlaneacionPrimerCiclo',
                            'tabla_afectada' => 'planeacion',
                            'descripcion' => 'Se realizo la insercion en la tabla planeacion insertando las materias delprimer ciclo del estudiante ' . $codBanner . ', iniciando en el id ' . $primerId . ' y terminando en el id ' . $ultimoRegistroId . '.',
                        ]);
                        $insertIndiceCambio = IndiceCambiosMafi::create([
                            'idbanner' => $idBannerUltimoRegistro,
                            'accion' => 'Insert-PlaneacionPrimerCiclo',
                            'descripcion' => 'Se realizo la insercion en la tabla planeacion insertando las materias delprimer ciclor del estudiante ' . $codBanner . ', iniciando en el id ' . $primerId . ' y terminando en el id ' . $ultimoRegistroId . '.',
                            'fecha' => date('Y-m-d H:i:s'),
                        ]);
                        echo "-Fecha Inicio: " . $fechaInicio . "Fecha Fin: " . $fechaFin;
                        DB::commit();
                        echo "Inserción exitosa de la gran cantidad de datos." . $estudiante->homologante;
                        //$registroMPV++;
                    } catch (Exception $e) {
                        // Deshacer la transacción en caso de error
                        DB::rollBack();
                        // Manejar el error
                        echo "Error al insertar la gran cantidad de datos: " . $e->getMessage();
                        dd($estudiante);
                    }
                    var_dump($cuentaCursosCiclo1);
                endforeach;
                die();
            endfor;
        else :
            echo "No hay estudiantes de primer ciclo para programar <br>";
        endif;
        die();
        /** Replicar los datos en estudiantes desde datosMafiReplica Aplicando los flitros */
        $log = DB::table('logAplicacion')->where([['accion', '=', 'Insert'], ['tabla_afectada', '=', 'estudiantes']])->orderBy('id', 'desc')->first();
        if (empty($log)) :
            $offset = 0;
        else :
            $offset = $log->idFin;
        endif;
        /**SELECT dmr.*,p.activo AS programaActivo FROM `datosMafiReplica` dmr
            INNER JOIN programas p ON p.codprograma=dmr.programa
            INNER JOIN periodo pe ON pe.periodos=dmr.periodo
            WHERE dmr.id > 0
            AND pe.periodoActivo = 1
            ORDER BY dmr.id ASC */
        $data = DB::table('datosMafiReplica')
            ->join('programas', 'datosMafiReplica.programa', '=', 'programas.codprograma')
            ->join('periodo', 'datosMafiReplica.periodo', '=', 'periodo.periodos')
            ->select('datosMafiReplica.*', 'programas.activo AS programaActivo')
            ->where([['datosMafiReplica.id', '>', $offset], ['periodo.periodoActivo', '=', 1]])
            ->orderBy('datosMafiReplica.id')
            ->get()
            ->chunk(200);



        if (!empty($data[0])) :
            $numeroRegistros = 0;
            $numeroRegistrosAlertas = 0;
            $primerId = $data[0][0]->id;
            $ultimoRegistroId = 0;
            $fechaInicio = date('Y-m-d H:i:s');
            foreach ($data as $keys => $estudiantes) :
                foreach ($estudiantes as $key => $value) :
                    if (str_contains($value->tipoestudiante, 'TRANSFERENTE EXTERNO') || str_contains($value->tipoestudiante, 'TRANSFERENTE INTERNO')) :
                        /**SELECT ha.codMateria FROM `datosMafiReplica` dmr
                        INNER JOIN historialAcademico ha ON ha.codBanner=dmr.idbanner
                        WHERE dmr.idbanner = [idbanner] */
                        $historial = DB::table('datosMafiReplica')
                            ->select('historialAcademico.codMateria')
                            ->join('historialAcademico', 'datosMafiReplica.idbanner', '=', 'historialAcademico.codBanner')
                            ->where('datosMafiReplica.idbanner', '=', $value->idbanner)->count();
                        if ($historial == 0) :
                            /**Insert tabla estudiantes en campo  tiene_historial "Sin Historial" */
                            if ($value->programaActivo < 1) :
                                $insertEstudinate = Estudiante::create([
                                    'homologante' => $value->idbanner,
                                    'nombre' => $value->primer_apellido,
                                    'programa' => $value->programa,
                                    'bolsa' => $value->ruta_academica,
                                    'operador' => $value->operador,
                                    'nodo' => 'nodo',
                                    'tipo_estudiante' => $value->tipoestudiante,
                                    'tiene_historial' => 'SIN HISTORIAL',
                                    'programaActivo' => 'NO SE ABRIO PROGRAMA',
                                    'marca_ingreso' => $value->periodo,
                                ]);
                                /**Insert tabla alertas_tempranas, transferente sin historial academico */
                                $insertAlerta = AlertasTempranas::create([
                                    'idbanner' => $value->idbanner,
                                    'tipo_estudiante' => $value->tipoestudiante,
                                    'desccripcion' => 'El estudiante con idBanner' . $value->idbanner . ' es "TRANSFERENTE EXTERENO" O  y no tiene historial academico',
                                ]);

                                if ($insertAlerta) :
                                    $numeroRegistrosAlertas++;
                                endif;
                            else :
                                /**Insert tabla estudiantes */
                                $insertEstudinate = Estudiante::create([
                                    'homologante' => $value->idbanner,
                                    'nombre' => $value->primer_apellido,
                                    'programa' => $value->programa,
                                    'bolsa' => $value->ruta_academica,
                                    'operador' => $value->operador,
                                    'nodo' => 'nodo',
                                    'tipo_estudiante' => $value->tipoestudiante,
                                    'tiene_historial' => 'SIN HISTORIAL',
                                    'marca_ingreso' => $value->periodo,
                                ]);

                                $insertAlerta = AlertasTempranas::create([
                                    'idbanner' => $value->idbanner,
                                    'tipo_estudiante' => $value->tipoestudiante,
                                    'desccripcion' => 'El estudiante con idBanner' . $value->idbanner . ' es "TRANSFERENTE EXTERENO" y no tiene historial academico',
                                ]);

                                if ($insertAlerta) :
                                    $numeroRegistrosAlertas++;
                                endif;

                                $insertAlerta = AlertasTempranas::create([
                                    'idbanner' => $value->idbanner,
                                    'tipo_estudiante' => $value->tipoestudiante,
                                    'desccripcion' => 'NO SE ABRIO PROGRAMA ' . $value->programa,
                                ]);

                            endif;
                            if ($insertAlerta) :
                                $numeroRegistrosAlertas++;
                            endif;

                            if ($insertEstudinate) :
                                $numeroRegistros++;
                            endif;
                        else :
                            if ($value->programaActivo > 0) :
                                /**Insert tabla estudiantes */
                                $insertEstudinate = Estudiante::create([
                                    'homologante' => $value->idbanner,
                                    'nombre' => $value->primer_apellido,
                                    'programa' => $value->programa,
                                    'bolsa' => $value->ruta_academica,
                                    'operador' => $value->operador,
                                    'nodo' => 'nodo',
                                    'tipo_estudiante' => $value->tipoestudiante,
                                    'marca_ingreso' => $value->periodo,
                                ]);
                            else :
                                /**Insert tabla estudiantes */
                                $insertEstudinate = Estudiante::create([
                                    'homologante' => $value->idbanner,
                                    'nombre' => $value->primer_apellido,
                                    'programa' => $value->programa,
                                    'bolsa' => $value->ruta_academica,
                                    'operador' => $value->operador,
                                    'nodo' => 'nodo',
                                    'tipo_estudiante' => $value->tipoestudiante,
                                    'programaActivo' => 'NO SE ABRIO PROGRAMA',
                                    'marca_ingreso' => $value->periodo,
                                ]);

                                $insertAlerta = AlertasTempranas::create([
                                    'idbanner' => $value->idbanner,
                                    'tipo_estudiante' => $value->tipoestudiante,
                                    'desccripcion' => 'NO SE ABRIO PROGRAMA ' . $value->programa,
                                ]);

                            endif;
                            if ($insertAlerta) :
                                $numeroRegistrosAlertas++;
                            endif;

                            if ($insertEstudinate) :
                                $numeroRegistros++;
                            endif;
                        endif;
                    else :
                        if ($value->programaActivo > 0) :
                            /**Insert tabla estudiantes */
                            $insertEstudinate = Estudiante::create([
                                'homologante' => $value->idbanner,
                                'nombre' => $value->primer_apellido,
                                'programa' => $value->programa,
                                'bolsa' => $value->ruta_academica,
                                'operador' => $value->operador,
                                'nodo' => 'nodo',
                                'tipo_estudiante' => $value->tipoestudiante,
                                'marca_ingreso' => $value->periodo,
                            ]);
                        else :
                            /**Insert tabla estudiantes */
                            $insertEstudinate = Estudiante::create([
                                'homologante' => $value->idbanner,
                                'nombre' => $value->primer_apellido,
                                'programa' => $value->programa,
                                'bolsa' => $value->ruta_academica,
                                'operador' => $value->operador,
                                'nodo' => 'nodo',
                                'tipo_estudiante' => $value->tipoestudiante,
                                'programaActivo' => 'NO SE ABRIO PROGRAMA',
                                'marca_ingreso' => $value->periodo,
                            ]);

                            $insertAlerta = AlertasTempranas::create([
                                'idbanner' => $value->idbanner,
                                'tipo_estudiante' => $value->tipoestudiante,
                                'desccripcion' => 'NO SE ABRIO PROGRAMA ' . $value->programa,
                            ]);

                            if ($insertAlerta) :
                                $numeroRegistrosAlertas++;
                            endif;
                        endif;

                        if ($insertEstudinate) :
                            $numeroRegistros++;
                        endif;
                    endif;
                    $ultimoRegistroId = $value->id;
                    $idBannerUltimoRegistro = $value->idbanner;
                endforeach;
            endforeach;
            $fechaFin = date('Y-m-d H:i:s');
            $insertLog = LogAplicacion::create([
                'idInicio' => $primerId,
                'idFin' => $ultimoRegistroId,
                'fechaInicio' => $fechaInicio,
                'fechaFin' => $fechaFin,
                'accion' => 'Insert',
                'tabla_afectada' => 'estudiantes',
                'descripcion' => 'Se realizo la insercion en la tabla estudiantes desde la tabla datosMafiReplica, iniciando en el id ' . $primerId . ' y terminando en el id ' . $ultimoRegistroId . ',insertando ' . $numeroRegistros . ' registros',
            ]);

            $insertIndiceCambio = IndiceCambiosMafi::create([
                'idbanner' => $idBannerUltimoRegistro,
                'accion' => 'Insert',
                'descripcion' => 'Se realizo la insercion en la tabla estudiantes desde la tabla datosMafiReplica, iniciando en el id ' . $primerId . ' y terminando en el id ' . $ultimoRegistroId . ',insertando ' . $numeroRegistros . ' registros',
                'fecha' => date('Y-m-d H:i:s'),
            ]);
            echo  "Numero de registros: " . $numeroRegistros . "=> primer id registrado: " . $primerId . ', Ultimo id registrado ' . $ultimoRegistroId .
                "<br> Numero de registrosen alertas: " . $numeroRegistrosAlertas .
                "<br> inicio:" . $fechaInicio . "-- Fin:" . $fechaFin;
        else :
            echo "No hay registros para replicar <br>";
        endif;

        /**Ingresar la materias faltantes por ver de los estudiantes de primer ingreso e ingreso singular */
        $log = DB::table('logAplicacion')->where([['accion', '=', 'Insert-PrimerIngreso'], ['tabla_afectada', '=', 'materiasPorVer']])->orderBy('id', 'desc')->first();
        if (empty($log)) :
            $offset = 0;
        else :
            $offset = $log->idFin;
        endif;
        $primerIngreso = $this->falatntesPrimerIngreso($offset);
        if (!empty($primerIngreso[0])) :
            $fechaInicio = date('Y-m-d H:i:s');
            $registroMPV = 0;
            $primerId = $primerIngreso[0]->id;
            $ultimoRegistroId = 0;
            foreach ($primerIngreso as $estudiante) :
                $mallaCurricular = $this->BaseAcademica($estudiante->homologante, $estudiante->programa);
                $orden =1;
                foreach ($mallaCurricular as $key => $malla) :
                    $insertMateriaPorVer = MateriasPorVer::create([
                        "codBanner"      => $malla['codBanner'],
                        "codMateria"      => $malla['codMateria'],
                        "orden"      => $orden,
                        "codprograma"      => $malla['codprograma'],
                    ]);
                    $registroMPV++;
                    $orden++;
                endforeach;
                DB::table('estudiantes')->where([['homologante', '=', $estudiante->homologante], ['id', '=', $estudiante->id]])->update(['materias_faltantes' => 'OK']);
                $ultimoRegistroId = $estudiante->id;
                $idBannerUltimoRegistro = $estudiante->homologante;
            endforeach;
            $fechaFin = date('Y-m-d H:i:s');
            $insertLog = LogAplicacion::create([
                'idInicio' => $primerId,
                'idFin' => $ultimoRegistroId,
                'fechaInicio' => $fechaInicio,
                'fechaFin' => $fechaFin,
                'accion' => 'Insert-PrimerIngreso',
                'tabla_afectada' => 'materiasPorVer',
                'descripcion' => 'Se realizo la insercion en la tabla materiasPorVer insertando las materias por ver del estudiante de primer ingreso, modificando el valor del campo materias_faltantes en la tabla estudiantes de NULL a "OK" en cada estudiante, iniciando en el id ' . $primerId . ' y terminando en el id ' . $ultimoRegistroId . ',insertando ' . $registroMPV . ' registros',
            ]);
            $insertIndiceCambio = IndiceCambiosMafi::create([
                'idbanner' => $idBannerUltimoRegistro,
                'accion' => 'Insert-PrimerIngreso',
                'descripcion' => 'Se realizo la insercion en la tabla materiasPorVer insertando las materias por ver del estudiante de primer ingreso, modificando el valor del campo materias_faltantes en la tabla estudiantes de NULL a "OK" en cada estudiante, iniciando en el id ' . $primerId . ' y terminando en el id ' . $ultimoRegistroId . ',insertando ' . $registroMPV . ' registros',
                'fecha' => date('Y-m-d H:i:s'),
            ]);
            echo $registroMPV . "-Fecha Inicio: " . $fechaInicio . "Fecha Fin: " . $fechaFin . "<br>";
        else :
            echo "No hay estudiantes de primer ingreso <br>";
        endif;

        /**Ingresar la materias faltantes por ver de los estudiantes transferentes */
        $log = DB::table('logAplicacion')->where([['accion', '=', 'Insert-Transferente'], ['tabla_afectada', '=', 'materiasPorVer']])->orderBy('id', 'desc')->first();
        if (empty($log)) :
            $offset = 0;
        else :
            $offset = $log->idFin;
        endif;
        $estudiantesTransferentes = $this->falatntesTranferentes($offset);
        if (!empty($estudiantesTransferentes[0])) :
            $fechaInicio = date('Y-m-d H:i:s');
            $registroMPV = 0;
            $primerId = $estudiantesTransferentes[0]->id;
            $ultimoRegistroId = 0;
            //dd($transferente);
            foreach ($estudiantesTransferentes as $estudiante) :
                $historial = $this->historialAcademico($estudiante->homologante);
                //dd($historial['codprograma']);
                $mallaCurricular = $this->BaseAcademica($estudiante->homologante,$estudiante->programa);
                //dd($mallaCurricular);
                $diff = array_udiff($mallaCurricular, $historial, function($a, $b) {
                    return $a['codMateria'] <=> $b['codMateria'];
                });
                $orden = 1;
                foreach ($diff as $key => $value) :
                    //dd($value);
                    $insertMateriaPorVer = MateriasPorVer::create([
                        "codBanner"      => $value['codBanner'],
                        "codMateria"      => $value['codMateria'],
                        "orden"      => $orden,
                        "codprograma"      => $value['codprograma'],
                    ]);
                    $orden++;
                    $registroMPV++;
                endforeach;
                DB::table('estudiantes')->where([['homologante','=',$estudiante->homologante],['id','=',$estudiante->id]])->update(['materias_faltantes'=>'OK']);

                $ultimoRegistroId = $estudiante->id;
                $idBannerUltimoRegistro = $estudiante->homologante;
            endforeach;
            $fechaFin = date('Y-m-d H:i:s');
            $insertLog = LogAplicacion::create([
                'idInicio' => $primerId,
                'idFin' => $ultimoRegistroId,
                'fechaInicio' => $fechaInicio,
                'fechaFin' => $fechaFin,
                'accion' => 'Insert-Transferente',
                'tabla_afectada' => 'materiasPorVer',
                'descripcion' => 'Se realizo la insercion en la tabla materiasPorVer insertando las materias por ver del estudiante transferente, iniciando en el id ' . $primerId . ' y terminando en el id ' . $ultimoRegistroId . ',insertando ' . $registroMPV . ' registros',
            ]);

            $insertIndiceCambio = IndiceCambiosMafi::create([
                'idbanner' => $idBannerUltimoRegistro,
                'accion' => 'Insert-Transferente',
                'descripcion' => 'Se realizo la insercion en la tabla materiasPorVer insertando las materias por ver del estudiante transferente, iniciando en el id ' . $primerId . ' y terminando en el id ' . $ultimoRegistroId . ',insertando ' . $registroMPV . ' registros',
                'fecha' => date('Y-m-d H:i:s'),
            ]);
            echo $registroMPV . "-Fecha Inicio: " . $fechaInicio . "Fecha Fin: " . $fechaFin."<br>";
        else :
            echo "No hay estudiantes TRANSFERENTES <br>";
        endif;

        /**Ingresar la materias faltantes por ver de los estudiantes ANTIGUOS  */
        $estudiantesAntiguosC = DB::table('estudiantes')
            ->where('tipo_estudiante', 'LIKE', 'ESTUDIANTE ANTIGUO%')
            ->whereNull('programaActivo')
            ->whereNull('materias_faltantes')
            ->orWhere('tipo_estudiante', 'LIKE', 'PSEUDO ACTIVOS%')
            ->whereNull('programaActivo')
            ->whereNull('materias_faltantes')
            ->orderBy('id')->count();
        if($estudiantesAntiguosC > 0):
        $numeroEstudiantes = ceil($estudiantesAntiguosC/200);
        //dd(ceil($numeroEstudiantes/2));
        for ($i=0; $i < $numeroEstudiantes; $i++) :
            $log = DB::table('logAplicacion')->where([['accion', '=', 'Insert-EstudinatesAntiguos'], ['tabla_afectada', '=', 'materiasPorVer']])->orderBy('id', 'desc')->first();
            if(empty($log)):
                $offset = 0;
            else:
                $offset = $log->idFin;
            endif;
            $limit = 200;
            $estudiantesAntiguos = $this->faltantesAntiguos($offset,$limit);
            foreach($estudiantesAntiguos as $estudiante):
                $fechaInicio = date('Y-m-d H:i:s');
                $primerId = $estudiante->id;
                $ultimoRegistroId = 0;
                /**Consultas:
                 * Historial por Estudiante
                 * Malla Curricular por programa*/
                $historial = $this->historialAcademico($estudiante->homologante);
                $mallaCurricular = $this->BaseAcademica($estudiante->homologante,$estudiante->programa);
                $diff = array_udiff($mallaCurricular, $historial, function($a, $b) {
                    return $a['codMateria'] <=> $b['codMateria'];
                });
                $cantidadDiff = count($diff);
                if(count($diff) > 0):
                    DB::beginTransaction();

                    /**insertar materiasPorVer */
                    try {
                        DB::table('materiasPorVer')->insert($diff);
                        DB::table('estudiantes')->where([['homologante','=',$estudiante->homologante],['id','=',$estudiante->id]])->update(['materias_faltantes'=>'OK']);
                        $ultimoRegistroId = $estudiante->id;
                        $idBannerUltimoRegistro = $estudiante->homologante;
                        $fechaFin = date('Y-m-d H:i:s');
                        $insertLog = LogAplicacion::create([
                            'idInicio' => $primerId,
                            'idFin' => $ultimoRegistroId,
                            'fechaInicio' => $fechaInicio,
                            'fechaFin' => $fechaFin,
                            'accion' => 'Insert-EstudinatesAntiguos',
                            'tabla_afectada' => 'materiasPorVer',
                            'descripcion' => 'Se realizo la insercion en la tabla materiasPorVer insertando las materias por ver del estudiante de primer ingreso, iniciando en el id ' . $primerId . ' y terminando en el id ' . $ultimoRegistroId . '.',
                        ]);
                        $insertIndiceCambio = IndiceCambiosMafi::create([
                            'idbanner' => $idBannerUltimoRegistro,
                            'accion' => 'Insert-EstudinatesAntiguos',
                            'descripcion' => 'Se realizo la insercion en la tabla materiasPorVer insertando las materias por ver del estudiante de primer ingreso, iniciando en el id ' . $primerId . ' y terminando en el id ' . $ultimoRegistroId . '.',
                            'fecha' => date('Y-m-d H:i:s'),
                        ]);
                        echo "-Fecha Inicio: " . $fechaInicio . "Fecha Fin: " . $fechaFin;
                        // Confirmar la transacción
                        DB::commit();
                        echo "Inserción exitosa de la gran cantidad de datos.". $estudiante->homologante;
                        //$registroMPV++;
                    } catch (Exception $e) {
                        // Deshacer la transacción en caso de error
                        DB::rollBack();
                        // Manejar el error
                        echo "Error al insertar la gran cantidad de datos: " . $e->getMessage();
                        dd($estudiante);
                    }
                else:
                    /**crear alerta temprana estudinate vio todo */
                    $insertAlerta = AlertasTempranas::create([
                        'idbanner' => $estudiante->homologante,
                        'tipo_estudiante' => $estudiante->tipo_estudiante,
                        'desccripcion' => 'El estudiante con idBanner' . $estudiante->homologante . ' es estudiante antiguo y ya vio todo.',
                    ]);
                    DB::table('estudiantes')->where([['homologante','=',$estudiante->homologante],['id','=',$estudiante->id]])
                    ->update(['materias_faltantes'=>'YA VIO TODO','tiene_historial'=>'COMPLETO']);
                    echo "estudinate vio todo". $estudiante->homologante;
                endif;
            endforeach;
        endfor;
        else:
            echo "No hay estudiantes ANTIGUOS,ni PSEUDO INGRESO O REINGRESO <br>";
        endif;


    }

    public function falatntesPrimerIngreso($offset)
    {
        /**SELECT * FROM `estudiantes`
            WHERE `id` > 0
            AND `tipo_estudiante` LIKE 'PRIMER%'
            AND `programaActivo` IS NULL
            AND `materias_faltantes` IS NULL
            OR `tipo_estudiante` LIKE 'INGRESO%'
            AND `programaActivo` IS NULL
            AND `materias_faltantes` IS NULL */
        $estudiantesPrimerIngreso = DB::table('estudiantes')
            ->where('id','>',$offset)
            ->where('tipo_estudiante', 'LIKE', 'PRIMER%')
            ->whereNull('programaActivo')
            ->whereNull('materias_faltantes')
            ->orWhere('tipo_estudiante', 'LIKE', 'INGRESO%')
            ->whereNull('programaActivo')
            ->whereNull('materias_faltantes')
            ->orderBy('id')
            ->get();

        //dd($estudiantesPrimerIngreso);

        return $estudiantesPrimerIngreso;
    }

    public function falatntesTranferentes($offset)
    {
        /**SELECT * FROM `estudiantes`
            WHERE `id` > 0
            AND `tipo_estudiante` like 'TRANSFERENTE%'
            AND `programaActivo` IS NULL
            AND `tiene_historial` IS NULL
            AND `materias_faltantes` IS NULL */
        $estudiantesPrimerIngreso = DB::table('estudiantes')
            ->where('id','>',$offset)
            ->where('tipo_estudiante', 'LIKE', 'TRANSFERENTE%')
            ->whereNull('programaActivo')
            ->whereNull('tiene_historial')
            ->whereNull('materias_faltantes')
            ->orderBy('id')
            ->get();

        return $estudiantesPrimerIngreso;
    }

    public function faltantesAntiguos($offset,$limit)
    {

        /**SELECT * FROM `estudiantes`
            WHERE `id` > 0
            AND `tipo_estudiante` LIKE 'ESTUDIANTE ANTIGUO%'
            AND `programaActivo` IS NULL
            AND `materias_faltantes` IS NULL
            OR `tipo_estudiante` LIKE 'PSEUDO ACTIVOS%'
            AND `programaActivo` IS NULL
            AND `materias_faltantes` IS NULL
            OR `tipo_estudiante` = 'REINGRESO'
            AND `programaActivo` IS NULL
            AND `materias_faltantes` IS NULL
            ORDER BY `id` ASC
            LIMIT 200  */
        $estudiantesAntiguos = DB::table('estudiantes')
            ->where('id','>',$offset)
            ->where('tipo_estudiante', 'LIKE', 'ESTUDIANTE ANTIGUO%')
            ->whereNull('programaActivo')
            ->whereNull('materias_faltantes')
            ->orWhere('tipo_estudiante', 'LIKE', 'PSEUDO ACTIVOS%')
            ->whereNull('programaActivo')
            ->whereNull('materias_faltantes')
            ->orWhere('tipo_estudiante', '=', 'REINGRESO')
            ->whereNull('programaActivo')
            ->whereNull('materias_faltantes')
            ->orderBy('id')
            ->limit($limit)
            ->get();

        return $estudiantesAntiguos;
    }

    public function BaseAcademica($idbanner,$programa)
    {
        //Obtener la base academica del programa seleccionado

        $data = [];
        $mallaCurricular = DB::table('mallaCurricular')
        ->join('programas', 'programas.codprograma', '=', 'mallaCurricular.codprograma')
        ->select('mallaCurricular.codigoCurso', 'mallaCurricular.orden', 'mallaCurricular.codprograma')
        ->where([['programas.activo', '=', 1], ['mallaCurricular.codprograma', '=', $programa]])
            ->orderBy('semestre', 'asc')
            ->orderBy('orden', 'asc')
            ->get();
        $orden =1;
        foreach ($mallaCurricular as $key => $value) :
            $data[] = [
                'codBanner' => $idbanner,
                'codMateria'=>$value->codigoCurso,
                'orden'=>$orden,
                'codprograma'=>$value->codprograma,
                'created_at' => now(),
                'updated_at' => now(),
            ];
            $orden++;
        endforeach;
        //return $mallaCurricular;
        return $data;
    }


    public function historialAcademico($idBanner)
    {

        $data = [];
        $historial = DB::table('historialAcademico')
            ->select('codMateria', 'codprograma')
            ->where([['codBanner', '=', $idBanner],['codMateria','<>','na']])
            ->get()->toArray();

        foreach($historial as $key => $value):
            $data[] = [
                'codMateria'=>$value->codMateria,
                'codprograma'=>$value->codprograma];
        endforeach;
        //dd($data);

        return $data;
    }

    //*** funcion para activar los periodos automaticamente */
    public function periodo()
    {

        /** traemos la fecha actual para poder comparar con el periodo */
        $fechaActual = date('Y-m-d');
        $mes = explode('-', $fechaActual);
        $periodo = DB::table('periodo')->get();

        $mes[1] = 06;


        foreach ($periodo as $key => $value) {



            $ciclo1 = explode('-', $value->fechaInicioCiclo1);
            $ciclo2 = explode('-', $value->fechaInicioCiclo2);


            if (in_array($mes[1], $ciclo1) || in_array($mes[1], $ciclo2)) {

                DB::table('periodo')
                    ->where('id', $value->id)
                    ->update(['periodoActivo' => 1]);

                if (in_array((int)$mes[1], $ciclo1)) {
                    DB::table('periodo')
                        ->where('id', $value->id)
                        ->update(['activoCiclo1' => 1]);
                } else {
                    DB::table('periodo')
                        ->where('id', $value->id)
                        ->update(['activoCiclo1' => 0]);
                }

                if (in_array((int)$mes[1], $ciclo2)) {
                    DB::table('periodo')
                        ->where('id', $value->id)
                        ->update(['activoCiclo2' => 1]);
                } else {
                    DB::table('periodo')
                        ->where('id', $value->id)
                        ->update(['activoCiclo2' => 0]);
                }
            } else {
                DB::table('periodo')
                    ->where('id', $value->id)
                    ->update(['periodoActivo' => 0]);
            }
        }

        $periodo = DB::table('periodo')
            ->where(['periodoActivo' => 1])
            ->get();




        return  $periodo;
    }

    /** funcion para traer todos los programas activos en la plataforma */
    public function get_programas(){

        /* consulta sql para traer los programas activos
        * SELECT * FROM `programas` WHERE activo=1;
        */
        $programas= DB::table('programas')
            ->where('activo','=',1)
            ->get();

        return $programas;

    }

    /** para generar materias faltantes de los estudiantes  */
   /* public function Generar_faltantes()
    {


         /// para activar el perodo activo en la base de datos
         $periodo = $this->periodo();
         $marcaIngreso = "";
         foreach ($periodo as $key => $value) {
             $marcaIngreso .= (int)$value->periodos . ",";
         }

         // para procesasr las marcas de ingreso en los periodos
         $marcaIngreso=trim($marcaIngreso,",");
         // Dividir la cadena en elementos individuales
         $marcaIngreso = explode(",", $marcaIngreso);
         // Convertir cada elemento en un número
         $marcaIngreso = array_map('intval', $marcaIngreso);
         /* traemos todos los programas activos para la consulta
         $programas= $this->get_programas();



        /* select `id`, `homologante`, `programa`
                    from `estudiantes`
            where `materias_faltantes` = 'OK'
            and `programado_ciclo1` is null
            and `programado_ciclo2` is null
            and `programa` = 'PCPV'
            and `marca_ingreso` in (202305, 202312, 202332, 202342, 202352, 202306, 202313, 202333, 202343, 202353);


            $consulta_homologante = 'SELECT id, homologante, programa FROM homologantes WHERE materias_faltantes="" AND programado_ciclo1="" AND programado_ciclo2="" AND programa="PCPV" AND marca_ingreso IN (202313, 202333)ORDER BY id ASC';




        foreach($programas as $programa ){



            // Estudiantes para generar faltantes por programa
            $consulta_homologante= DB::table('estudiantes')
            ->select('id', 'homologante', 'programa')
            ->where('materias_faltantes',' ')
            ->whereNull('programado_ciclo1')
            ->whereNull('programado_ciclo2')
            ->where('programa', "PPSV")
            ->whereIn('marca_ingreso',$marcaIngreso)
            ->orderBy('id','ASC')
            ->chunk(200, function($estudiantes){

                foreach ($estudiantes as $estudiante) :

                    $id_homologante=$estudiante->id;
                    $codHomologante=$estudiante->homologante;
                    $programa_homologante=$estudiante->programa;

                    // Materias vistas por estudiante
                    $consulta_vistas = 'SELECT codMateria, codBanner FROM historialAcademico WHERE codBanner='.$codHomologante.';';
                    //echo $consulta_vistas . "<br />";
                    //exit();

                    $resultado_visitas = DB::select($consulta_vistas);




                    $contacor_vistas=0;
                    $codprograma='';
                    $codbanner='';
                    $materias_vistas = array();

                    while($fila =  $resultado_visitas) {
                        dd($fila);
                        $codbanner=$materias->codBanner'];
                        $codprograma= $programa_homologante;
                        $codmateria=$materias->codMateria'];
                        $materias_vistas[$contacor_vistas]= strtoupper($codmateria);
                    $contacor_vistas++;
                }
                $materias_vistas = $materias_vistas;
                //var_dump($materias_vistas);

                //echo "Programa:" . $codprograma . "<br />";
                //echo "Cod Banner: " .  $codbanner . "<br />";
                //exit();



                // Materias del programa
                $consulta_baseacademica = 'SELECT codigoCurso FROM mallaCurricular WHERE codprograma="'.$codprograma.'"  ORDER BY semestre, orden, ciclo DESC;';
                //echo $consulta_baseacademica . "<br />";
                //exit();

                $resultado_baseacademica = DB::select($consulta_baseacademica);


                $orden=1;
                while($fila = $resultado_baseacademica) {
                    $codcurso=$materias->codigoCurso'];

                    //echo "CodCurs: " . $codcurso . "<br />";
                    //var_dump($materias_vistas);
                    //exit();

                    if (!in_array($codcurso, $materias_vistas)) {
                        $insert_porver = 'INSERT INTO materias_porver (id, codBanner, codMateria, orden, codprograma) VALUES (NULL, '.$codbanner.', "'.$codcurso.'", '.$orden.', "'.$programa_homologante.'");';
                        echo $insert_porver . "<br />";

                        $resultado_porver = DB::select($insert_porver);
                        //echo $insert_porver . "<br />";
                        $orden++;
                    }
                }
                echo "<br />Insertadas las materias por ver de: " . $codbanner;


                $update_homologante = 'UPDATE homologantes SET materias_faltantes="OK" WHERE homologantes.id='.$id_homologante.';';
                $resultado_updatehomologante =DB::select($update_homologante);


            endforeach;
        });





        /**utilizamos la función array_filter() y in_array() para filtrar los elementos de $array1 que existen en $array2. El resultado se almacena en $intersection. Luego, verificamos si $intersection contiene al menos un elemento utilizando count($intersection) > 0.

        //    $intersection = array_filter($array1, function ($item) use ($array2) {
            //         return in_array($item, $array2);
        //     });


        //     $diff = array_udiff($array1, $array2, function($a, $b) {
            //         return $a['name'] <=> $b['name'];
            //     });
            //     dd($diff);



        }

            die();




    }*/

        public function Generar_faltantes(){

                /// para activar el perodo activo en la base de datos
                $periodo = $this->periodo();
                $marcaIngreso = "";
                foreach ($periodo as $key => $value) {
                    $marcaIngreso .= (int)$value->periodos . ",";
                }

                // para procesasr las marcas de ingreso en los periodos
                $marcaIngreso=trim($marcaIngreso,",");
                // Dividir la cadena en elementos individuales
                $marcaIngreso = explode(",", $marcaIngreso);
                // Convertir cada elemento en un número
                $marcaIngreso = array_map('intval', $marcaIngreso);
            //traemos todos los programas activos para la consulta
                $programas= $this->get_programas();



                /*select `id`, `homologante`, `programa`
                        from `estudiantes`
                where `materias_faltantes` = 'OK'
                and `programado_ciclo1` is null
                and `programado_ciclo2` is null
                and `programa` = 'PCPV'
                and `marca_ingreso` in (202305, 202312, 202332, 202342, 202352, 202306, 202313, 202333, 202343, 202353);*/


            # code...

            foreach ($programas as $key => $value) {

                // Estudiantes para generar faltantes por programa
                $consulta_homologante= DB::table('estudiantes')
                ->select('id', 'homologante', 'programa')
                ->where('materias_faltantes','OK')
                ->whereNull('programado_ciclo1')
                ->whereNull('programado_ciclo2')
                ->where('programa',$value->codprograma)
                ->whereIn('marca_ingreso',$marcaIngreso)
                ->orderBy('id','ASC')
                ->chunk(200, function($estudiantes){

                    foreach ($estudiantes as $estudiante) :

                        $id_homologante=$estudiante->id;
                        $codHomologante=$estudiante->homologante;
                        $programa_homologante=$estudiante->programa;



                    endforeach;
                });
            }

        }

        /**validar si el estudiante tiene creditos planeados */
        public function programarPrimerCiclo($id,$limit,$programado_ciclo1){

            /**select `planeacion`.`codBanner`, SUM(mallaCurricular.creditos) AS CreditosPlaneados from `mallaCurricular` inner join `planeacion` on `planeacion`.`codMateria` = `mallaCurricular`.`codigoCurso` where `planeacion`.`codBanner` = ? group by `planeacion`.`codBanner` */
            /// para activar el perodo activo en la base de datos
            $periodo = $this->periodo();
            $marcaIngreso = "";
            foreach ($periodo as $key => $value) {
                $marcaIngreso .= (int)$value->periodos . ",";
            }

            // para procesasr las marcas de ingreso en los periodos
            $marcaIngreso=trim($marcaIngreso,",");
            // Dividir la cadena en elementos individuales
            $marcaIngreso = explode(",", $marcaIngreso);
            // Convertir cada elemento en un número
            $marcaIngreso = array_map('intval', $marcaIngreso);

            //$marcaIngreso = [202313,202333];
            $estudiante = DB::table('estudiantes')
                    ->select('id','homologante','programa','bolsa','tipo_estudiante')
                    ->where('id','>',$id)
                    ->where('materias_faltantes','=','OK')
                    ->where('programado_ciclo1','=',$programado_ciclo1)
                    ->whereNull('programado_ciclo2')
                    ->whereIn('marca_ingreso',$marcaIngreso)
                    ->orderBy('id','asc')
                    ->limit($limit)
                    ->get();



            return $estudiante;
        }


        /**Materias por ver de cada estudiante */
        public function materiasPorVer($codBanner,$ciclo,$programa){


            // Materias que debe ver el estudiante por ciclo
          $materiasPorVer = DB::table("materiasPorVer")
                ->select('materiasPorVer.codBanner','materiasPorVer.codMateria','materiasPorVer.orden','mallaCurricular.creditos','mallaCurricular.ciclo')
                ->join('mallaCurricular','mallaCurricular.codigoCurso','=','materiasPorVer.codMateria')
                ->where('materiasPorVer.codBanner','=',$codBanner)
                ->whereIn('mallaCurricular.ciclo',$ciclo)
                ->where('materiasPorVer.codprograma','=',$programa)
                ->where('mallaCurricular.codprograma','=',$programa)
                ->orderBy('materiasPorVer.orden','ASC')
                ->get();

            return $materiasPorVer;
        }

        public function prerequisitos($codMateria,$codPrograma){
            /**SELECT prerequisito FROM mallaCurricular WHERE codigoCurso="?" AND codprograma = "?" */
            $prerequisitos = DB::table('mallaCurricular')
                                ->select('prerequisito')
                                ->where([['codigoCurso','=',$codMateria],['codprograma','=',$codPrograma]])
                                ->first();
            return $prerequisitos;
        }

        // No. de creditos para el homologante
        public function sumar_creditos($codBanner){


            $consulta_sumacreditos = DB::table('mallaCurricular')
            ->select('planeacion.codBanner',DB::raw('SUM(mallaCurricular.creditos) AS CreditosPlaneados'))
            ->join('planeacion','planeacion.codMateria','=','mallaCurricular.codigoCurso')
            ->where('planeacion.codBanner','=',$codBanner)
            ->groupBy('planeacion.codBanner')
            ->first();


            $creditos_homologantes = $consulta_sumacreditos==NULL ? "0" :$consulta_sumacreditos->CreditosPlaneados;

            return $creditos_homologantes;

        }

        public function consulta_creditos($codBanner,$ciclo){

            $numeroCreditosC1 = DB::table('mallaCurricular')
                    ->select(DB::raw('SUM(mallaCurricular.creditos) AS creditos'),DB::raw('COUNT(mallaCurricular.creditos) AS cursos'))
                    ->join('planeacion','planeacion.codMateria','=','mallaCurricular.codigoCurso')
                    ->where('planeacion.codBanner','=',$codBanner)
                    ->whereIn('mallaCurricular.ciclo',$ciclo)
                    ->first();

            return $numeroCreditosC1;

        }

        public function reglas_negocio($ciclo,$programa,$ruta,$tipoEstudiante){

            $cicloReglaNegocio =$ciclo;

            $reglaNegocio =DB::table('reglasNegocio')
                            ->select('creditos','materiasPermitidas')
                            ->where([['programa','=',$programa],['ruta','=',$ruta],['tipoEstudiante','=',$tipoEstudiante],['ciclo','=',$cicloReglaNegocio],['activo','=',1]])
                            ->first();


            return  $reglaNegocio;
        }

        public function esta_en_planeacion($prerequisitos,$codBanner){

            $query=DB::table('planeacion')
            ->select('codMateria')
            ->whereIn('codMateria',[$prerequisitos->prerequisito])
            ->where('codBanner','=',$codBanner)
            ->first();

            return $query;
        }

        public function Planeacion($codBanner,$ciclo,$programa,$codMateria,$codPrograma,$ruta,$tipoEstudiante){

            $materiasPorVer=$this->materiasPorVer($codBanner,$ciclo,$programa);

            $prerequisitos=$this->prerequisitos($codMateria,$codPrograma);

            $creditos_homologantes=$this->sumar_creditos($codBanner);

            $numeroCreditosC1=$this->consulta_creditos($codBanner,$ciclo);

            $sumaCreditosCiclo1 = $numeroCreditosC1->creditos==''?0:$numeroCreditosC1->creditos;

            $cuentaCursosCiclo1 = $numeroCreditosC1->cursos==''?0:$numeroCreditosC1->cursos;

            $reglaNegocio=$this->reglas_negocio($ciclo,$programa,$ruta,$tipoEstudiante);

            $numeroCreditosPermitidos = $reglaNegocio->creditos;
            $numeroMateriasPermitidas = $reglaNegocio->materiasPermitidas;
            $orden2=1;

            foreach ($materiasPorVer as $materias) {
                # code...

                $codBanner      =  $materias->codBanner;
                $codMateria     =  $materias->codMateria;
                $creditoMateria =  $materias->creditos;
                $ciclo          =  $materias->ciclo;



                if($prerequisitos->prerequisito=='' && $cuentaCursosCiclo1 < $numeroMateriasPermitidas) {
                   // echo "entro sin prerequicitos materias  menores y creditos menores a los permitidos";


                    $esta_en_planeacion =$this-> esta_en_planeacion($prerequisitos,$codBanner);

                    if(empty($esta_en_planeacion) && $creditos_homologantes<   $numeroCreditosPermitidos) {

                        $creditos_homologantes = $creditos_homologantes + $creditoMateria;

                        $insert_planeada = 'INSERT INTO planeacion (id, codBanner, codMateria, orden, semestre, programada, codprograma) VALUES (NULL, '.$codBanner.', "'.$codMateria.'", '.$orden2.',"1", "", "'.$programa.'");';

                        $planeadas_insert=DB::insert(  $insert_planeada );


                    }
                } else {

                    $esta_en_planeacion =$this-> esta_en_planeacion($prerequisitos,$codBanner);

dd($cuentaCursosCiclo1);
                    if(empty($esta_en_planeacion)&& $ciclo!=2 && $cuentaCursosCiclo1< $numeroMateriasPermitidas) {

                        $creditos_homologantes = $creditos_homologantes + $creditoMateria;

                          $insert_planeada = 'INSERT INTO planeacion (id, codBanner, codMateria, orden, semestre, programada, codprograma) VALUES (NULL, '.$codBanner.', "'.$codMateria.'", '.$orden2.',"1", "", "'.$programa.'");';

                        $planeadas_insert=DB::insert(  $insert_planeada);
                        //$cuenta_cursos_ciclo1++;
                        // echo "22  " . $insert_planeada . "<br />";
                        // exit();
                        //echo "Actualziado Crdeditos Hom:" . $creditos_homologantes . "<br />";
                    }



                }
                $orden2++;
           /* $update_homologante = 'UPDATE homologantes SET programado_ciclo1="OK" WHERE homologantes.id='.$id_homologante.';';
            $resultado_updatehomologante = mysql_query($update_homologante, $link);
            echo "Planeación realizada para : " . $codBanner . " y " . $codMateria . "<br />";*/

            }

        }


        // funcion para probar otras funciones
        public function probarfunciones(){



            /**consulta de estudinates primer ciclo */
           /* if(auth()->user()->nombre=='Pablo Pérez Cortes'){
                $baseAcademica = $this->BaseAcademica(100147341,'PPSV');
                dd(auth()->user()->nombre);

            }*/
            $programado_ciclo1 = NULL;
            /// para activar el perodo activo en la base de datos
            $periodo = $this->periodo();
            $marcaIngreso = "";
            foreach ($periodo as $key => $value) {
                $marcaIngreso .= (int)$value->periodos . ",";
            }

            // para procesasr las marcas de ingreso en los periodos
            $marcaIngreso = trim($marcaIngreso, ",");
            // Dividir la cadena en elementos individuales
            $marcaIngreso = explode(",", $marcaIngreso);
            // Convertir cada elemento en un número
            $marcaIngreso = array_map('intval', $marcaIngreso);
            $estudiantes = DB::table('estudiantes')
            ->select('id', 'homologante', 'programa', 'bolsa', 'tipo_estudiante')
            ->where('materias_faltantes', '=', 'OK')
            ->where('programado_ciclo1', '=', $programado_ciclo1)
            ->whereNull('programado_ciclo2')
            ->whereIn('marca_ingreso', $marcaIngreso)
            ->orderBy('id', 'asc')
            ->limit(1)
            ->count();
            $limit = 200;
            $numeroEstudiantes = ceil($estudiantes / $limit);
            //dd($numeroEstudiantes);
            for ($i = 0; $i < $numeroEstudiantes; $i++) :

                $log = DB::table('logAplicacion')->where([['accion', '=', 'Insert-PlaneacionPrimerCiclo'], ['tabla_afectada', '=', 'planeacion']])->orderBy('id', 'desc')->first();
                //dd($log);
                if(empty($log)):
                    $id = 0;
                else:
                    $id = $log->idFin;
                endif;

                /**consulta de estudinates primer ciclo */
                $estudiantesPC = $this->programarPrimerCiclo($id, $limit, $programado_ciclo1);

                foreach($estudiantesPC as $estudiante):

                    $idEstudiante = $estudiante->id;
                    $codigoBanner = $estudiante->homologante;
                    $programa = $estudiante->programa;

                    $ruta = $estudiante->bolsa;

                    if($ruta != ''):
                        $ruta = 1;
                    endif;

                    $tipoEstudiante = $estudiante->tipo_estudiante;

                    switch ($tipoEstudiante) {
                        case str_contains($tipoEstudiante, 'TRANSFERENTE'):
                            $tipoEstudiante ='TRANSFERENTE';
                            break;
                        case str_contains($tipoEstudiante, 'ESTUDIANTE ANTIGUO'):
                            $tipoEstudiante ='ESTUDIANTE ANTIGUO';
                            break;
                        case str_contains($tipoEstudiante, 'PRIMER INGRESO'):
                            $tipoEstudiante='PRIMER INGRESO';
                            break;
                        case str_contains($tipoEstudiante, 'PSEUDO ACTIVOS'):
                            $tipoEstudiante = 'ESTUDIANTE ANTIGUO';
                            break;
                        case str_contains($tipoEstudiante, 'REINGRESO'):
                            $tipoEstudiante = 'ESTUDIANTE ANTIGUO';
                            break;
                        case str_contains($tipoEstudiante, 'INGRESO SINGULAR'):
                            $tipoEstudiante='PRIMER INGRESO';
                            break;

                        default:
                            # code...
                            break;
                    }

                    /** traemos las materias que le faltan por ver ciclo */
                    $materiasPorVer = $this->materiasPorVer($codigoBanner,$ciclo,$programa);

                    foreach ($materiasPorVer as $value_materiasPorVer) {

                       // dd($value_materiasPorVer);


                        $codMateria=$value_materiasPorVer->codMateria;
                        $codPrograma=$programa;
                        $planeacion=$this->Planeacion($codigoBanner,$ciclo,$programa,$codMateria,$codPrograma,$ruta,$tipoEstudiante);
                    }


                endforeach;



                //dd($estudiantesPC->count());
                /**recorrer por cada estudiante  */
                foreach ($estudiantesPC as $estudiante) :
                    $fechaInicio = date('Y-m-d H:i:s');
                    $primerId = $estudiante->id;
                    $ultimoRegistroId = 0;
                    $idEstudiante = 1063;
                    $codigoBanner = 100143955;
                    $programa = 'PCPV';
                    $ruta = $estudiante->bolsa;
                    if ($ruta != '') :
                        $ruta = 1;
                    endif;
                    $tipoEstudiante = $estudiante->tipo_estudiante;

                    switch ($tipoEstudiante) {
                        case str_contains($tipoEstudiante, 'TRANSFERENTE'):
                            $tipoEstudiante = 'TRANSFERENTE';
                            break;
                        case str_contains($tipoEstudiante, 'ESTUDIANTE ANTIGUO'):
                            $tipoEstudiante = 'ESTUDIANTE ANTIGUO';
                            break;
                        case str_contains($tipoEstudiante, 'PRIMER INGRESO'):
                            $tipoEstudiante = 'PRIMER INGRESO';
                            break;
                        case str_contains($tipoEstudiante, 'PSEUDO ACTIVOS'):
                            $tipoEstudiante = 'ESTUDIANTE ANTIGUO';
                            break;
                        case str_contains($tipoEstudiante, 'REINGRESO'):
                            $tipoEstudiante = 'ESTUDIANTE ANTIGUO';
                            break;
                        case str_contains($tipoEstudiante, 'INGRESO SINGULAR'):
                            $tipoEstudiante = 'PRIMER INGRESO';
                            break;

                        default:
                            # code...
                            break;
                    }
                    $ciclo = [1, 12];
                    /** */
                    $materiasPorVer = $this->materiasPorVer($codigoBanner, $ciclo, $programa);
                    /**select `planeacion`.`codBanner`, SUM(mallaCurricular.creditos) AS CreditosPlaneados from `mallaCurricular` inner join `planeacion` on `planeacion`.`codMateria` = `mallaCurricular`.`codigoCurso` where `planeacion`.`codBanner` = 100074631 group by `planeacion`.`codBanner` */
                    $numeroCreditos = DB::table('mallaCurricular')
                    ->select('planeacion.codBanner', DB::raw('SUM(mallaCurricular.creditos) AS CreditosPlaneados'))
                    ->join('planeacion', 'planeacion.codMateria', '=', 'mallaCurricular.codigoCurso')
                    ->where('planeacion.codBanner', '=', $codigoBanner)
                        ->groupBy('planeacion.codBanner')
                        ->first();
                    $numeroCreditos = $numeroCreditos == '' ? 0 : $numeroCreditos->CreditosPlaneados;
                    $numeroCreditosC1 = DB::table('mallaCurricular')
                    ->select(DB::raw('SUM(mallaCurricular.creditos) AS screditos'), DB::raw('COUNT(mallaCurricular.creditos) AS ccursos'))
                    ->join('planeacion', 'planeacion.codMateria', '=', 'mallaCurricular.codigoCurso')
                    ->where('planeacion.codBanner', '=', $codigoBanner)
                        ->whereIn('mallaCurricular.ciclo', [1, 12])
                        ->first();

                    $sumaCreditosCiclo1 = $numeroCreditosC1->screditos;
                    $sumaCreditosCiclo1 = $sumaCreditosCiclo1 == '' ? 0 : $sumaCreditosCiclo1;
                    $cuentaCursosCiclo1 = $numeroCreditosC1->ccursos;
                    $cuentaCursosCiclo1 = $cuentaCursosCiclo1 == '' ? 0 : $cuentaCursosCiclo1;



                    /**reglas del negocio */
                    $cicloReglaNegocio = 1;
                    $reglaNegocio = DB::table('reglasNegocio')
                    ->select('creditos', 'materiasPermitidas')
                    ->where([['programa', '=', $programa], ['ruta', '=', $ruta], ['tipoEstudiante', '=', $tipoEstudiante], ['ciclo', '=', $cicloReglaNegocio], ['activo', '=', 1]])
                        ->first();

                    $numeroCreditosPermitidos = $reglaNegocio->creditos;
                    $numeroMateriasPermitidos = $reglaNegocio->materiasPermitidas;
                    $orden = 1;
                    DB::beginTransaction();

                    try {

                        foreach ($materiasPorVer as $materia) :

                            if($cuentaCursosCiclo1 >= $numeroMateriasPermitidos):
                                break;
                            endif;
                            $codBanner = $materia->codBanner;
                            $codMateria = $materia->codMateria;
                            $creditoMateria = $materia->creditos;
                            $ciclo = $materia->ciclo;
                            $prerequisitosConsulta = $this->prerequisitos($codMateria, $programa);
                            //dd($programa,$codMateria,$prerequisitosConsulta);
                            $prerequisitos = $prerequisitosConsulta->prerequisito;
                            //dd($prerequisitos);
                            if ($prerequisitos == '' && $ciclo != 2 && $cuentaCursosCiclo1 < $numeroMateriasPermitidos) :
                                /**SELECT codMateria FROM planeacion WHERE codMateria="'.$codMateria.'" AND  	codBanner="'.$codBanner.'"; */
                                $estaPlaneacion = DB::table('planeacion')->select('codMateria')->where([['codMateria', '=', $codMateria], ['codBanner', '=', $codBanner]])->first();
                                //dd($numeroCreditos,$creditoMateria);
                                if ($estaPlaneacion == '' && $numeroCreditos < $numeroCreditosPermitidos) :
                                    $numeroCreditos = $numeroCreditos + $creditoMateria;
                                    $insertPlaneacion = DB::table('planeacion')->insert([
                                        'codBanner' => $codBanner,
                                        'codMateria' => $codMateria,
                                        'orden' => $orden,
                                        'semestre' => '1',
                                        'programada' => '',
                                        'codprograma' => $programa,
                                    ]);
                                    $cuentaCursosCiclo1++;
                                endif;
                                //echo $codBanner . '--' . $codMateria . '--' . $prerequisitos . "--" . $ciclo . '---' . $cuentaCursosCiclo1, '----' . 'sin P' . '<br>';
                                else :
                                    $prerequisitos = [$prerequisitos];
                                    $estaPlaneacion = DB::table('planeacion')->select('codMateria')->whereIn('codMateria', $prerequisitos)->where('codBanner', '=', $codBanner)->first();
                                    $estaPorVer = DB::table('materiasPorVer')->select('codMateria')->whereIn('codMateria', $prerequisitos)->where('codBanner', '=', $codBanner)->orderBy('id', 'ASC')->first();
                                    //dd($estaPorVer);
                                    //dd($numeroCreditos,$creditoMateria);
                                if ($estaPlaneacion == '' && $estaPorVer == '' && $cuentaCursosCiclo1 < $numeroMateriasPermitidos) :
                                    $numeroCreditos = (int)$numeroCreditos + (int)$creditoMateria;
                                    $insertPlaneacion = DB::table('planeacion')->insert([
                                        'codBanner' => $codBanner,
                                        'codMateria' => $codMateria,
                                        'orden' => $orden,
                                        'semestre' => '1',
                                        'programada' => '',
                                        'codprograma' => $programa,
                                    ]);
                                    $cuentaCursosCiclo1++;
                                endif;
                            //echo $codBanner . '--' . $codMateria . '--' . $prerequisitos2 . "--" . $ciclo . '---' . $cuentaCursosCiclo1 . '----' . 'con P' . '<br>';
                            endif;
                        endforeach;
                        DB::table('estudiantes')->where([['homologante', '=', $estudiante->homologante], ['id', '=', $estudiante->id]])->update(['programado_ciclo1' => 'OK']);
                        $ultimoRegistroId = $estudiante->id;
                        $idBannerUltimoRegistro = $estudiante->homologante;
                        $fechaFin = date('Y-m-d H:i:s');
                        $insertLog = LogAplicacion::create([
                            'idInicio' => $primerId,
                            'idFin' => $ultimoRegistroId,
                            'fechaInicio' => $fechaInicio,
                            'fechaFin' => $fechaFin,
                            'accion' => 'Insert-PlaneacionPrimerCiclo',
                            'tabla_afectada' => 'planeacion',
                            'descripcion' => 'Se realizo la insercion en la tabla planeacion insertando las materias delprimer ciclo del estudiante ' . $codBanner . ', iniciando en el id ' . $primerId . ' y terminando en el id ' . $ultimoRegistroId . '.',
                        ]);
                        $insertIndiceCambio = IndiceCambiosMafi::create([
                            'idbanner' => $idBannerUltimoRegistro,
                            'accion' => 'Insert-PlaneacionPrimerCiclo',
                            'descripcion' => 'Se realizo la insercion en la tabla planeacion insertando las materias delprimer ciclor del estudiante ' . $codBanner . ', iniciando en el id ' . $primerId . ' y terminando en el id ' . $ultimoRegistroId . '.',
                            'fecha' => date('Y-m-d H:i:s'),
                        ]);
                        echo "-Fecha Inicio: " . $fechaInicio . "Fecha Fin: " . $fechaFin;
                        DB::commit();
                        echo "Inserción exitosa de la gran cantidad de datos.". $estudiante->homologante;
                        //$registroMPV++;
                    } catch (Exception $e) {
                        // Deshacer la transacción en caso de error
                        DB::rollBack();
                        // Manejar el error
                        echo "Error al insertar la gran cantidad de datos: " . $e->getMessage();
                        dd($estudiante);
                    }
                    var_dump($cuentaCursosCiclo1);
                endforeach;
                die();
            endfor;
            die();
            /** Replicar los datos en estudiantes desde datosMafiReplica Aplicando los flitros */
            $log = DB::table('logAplicacion')->where([['accion', '=', 'Insert'], ['tabla_afectada', '=', 'estudiantes']])->orderBy('id', 'desc')->first();
            if (empty($log)) :
                $offset = 0;
            else :
                $offset = $log->idFin;
            endif;
            /*** por cada estudiante  */

        }


    public function estaEnPlaneacion($materia,$codBanner){
        $materia = [$materia];
        //dd($materia);
        /**SELECT codMateria FROM planeacion WHERE codMateria in ('AFV22612') AND codBanner="100147341" */
        $consultaPlaneacion = DB::table('planeacion')
                                    ->select('codMateria')
                                    ->whereIn('codMateria',$materia)
                                    ->where('codBanner','=',$codBanner)
                                    ->dd();
        return $consultaPlaneacion;
    }



}
";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:1:{s:21:"\App\Http\Controllers";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:21:"\App\Http\Controllers";s:36:" phpDocumentor\Reflection\Fqsen name";s:11:"Controllers";}}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:1:{s:36:"\App\Http\Controllers\MafiController";O:35:"phpDocumentor\Reflection\Php\Class_":13:{s:42:" phpDocumentor\Reflection\Php\Class_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:36:"\App\Http\Controllers\MafiController";s:36:" phpDocumentor\Reflection\Fqsen name";s:14:"MafiController";}s:45:" phpDocumentor\Reflection\Php\Class_ docBlock";N;s:45:" phpDocumentor\Reflection\Php\Class_ abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Class_ final";b:0;s:43:" phpDocumentor\Reflection\Php\Class_ parent";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:32:"\App\Http\Controllers\Controller";s:36:" phpDocumentor\Reflection\Fqsen name";s:10:"Controller";}s:47:" phpDocumentor\Reflection\Php\Class_ implements";a:0:{}s:46:" phpDocumentor\Reflection\Php\Class_ constants";a:0:{}s:47:" phpDocumentor\Reflection\Php\Class_ properties";a:0:{}s:44:" phpDocumentor\Reflection\Php\Class_ methods";a:23:{s:51:"\App\Http\Controllers\MafiController::__construct()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:51:"\App\Http\Controllers\MafiController::__construct()";s:36:" phpDocumentor\Reflection\Fqsen name";s:11:"__construct";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:21;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:24;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:50:"\App\Http\Controllers\MafiController::inicioMafi()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:50:"\App\Http\Controllers\MafiController::inicioMafi()";s:36:" phpDocumentor\Reflection\Fqsen name";s:10:"inicioMafi";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:26;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:29;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:51:"\App\Http\Controllers\MafiController::getDataMafi()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:51:"\App\Http\Controllers\MafiController::getDataMafi()";s:36:" phpDocumentor\Reflection\Fqsen name";s:11:"getDataMafi";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:31;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:175;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:61:"\App\Http\Controllers\MafiController::programarSegundoCiclo()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:61:"\App\Http\Controllers\MafiController::programarSegundoCiclo()";s:36:" phpDocumentor\Reflection\Fqsen name";s:21:"programarSegundoCiclo";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:177;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:200;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:58:"\App\Http\Controllers\MafiController::getDataMafiReplica()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:58:"\App\Http\Controllers\MafiController::getDataMafiReplica()";s:36:" phpDocumentor\Reflection\Fqsen name";s:18:"getDataMafiReplica";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:202;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:900;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:62:"\App\Http\Controllers\MafiController::falatntesPrimerIngreso()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:62:"\App\Http\Controllers\MafiController::falatntesPrimerIngreso()";s:36:" phpDocumentor\Reflection\Fqsen name";s:22:"falatntesPrimerIngreso";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:1:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:6:"offset";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:902;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:926;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:61:"\App\Http\Controllers\MafiController::falatntesTranferentes()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:61:"\App\Http\Controllers\MafiController::falatntesTranferentes()";s:36:" phpDocumentor\Reflection\Fqsen name";s:21:"falatntesTranferentes";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:1:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:6:"offset";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:928;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:946;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:57:"\App\Http\Controllers\MafiController::faltantesAntiguos()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:57:"\App\Http\Controllers\MafiController::faltantesAntiguos()";s:36:" phpDocumentor\Reflection\Fqsen name";s:17:"faltantesAntiguos";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:2:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:6:"offset";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:1;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:5:"limit";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:948;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:980;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:53:"\App\Http\Controllers\MafiController::BaseAcademica()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:53:"\App\Http\Controllers\MafiController::BaseAcademica()";s:36:" phpDocumentor\Reflection\Fqsen name";s:13:"BaseAcademica";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:2:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:8:"idbanner";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:1;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:8:"programa";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:982;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1008;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:58:"\App\Http\Controllers\MafiController::historialAcademico()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:58:"\App\Http\Controllers\MafiController::historialAcademico()";s:36:" phpDocumentor\Reflection\Fqsen name";s:18:"historialAcademico";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:1:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:8:"idBanner";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1011;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1028;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:47:"\App\Http\Controllers\MafiController::periodo()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:47:"\App\Http\Controllers\MafiController::periodo()";s:36:" phpDocumentor\Reflection\Fqsen name";s:7:"periodo";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1031;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1090;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:53:"\App\Http\Controllers\MafiController::get_programas()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:63:"funcion para traer todos los programas activos en la plataforma";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:0:{}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:20:"App\Http\Controllers";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:11:{s:16:"AlertasTempranas";s:27:"App\Models\AlertasTempranas";s:10:"Estudiante";s:21:"App\Models\Estudiante";s:17:"IndiceCambiosMafi";s:28:"App\Models\IndiceCambiosMafi";s:13:"LogAplicacion";s:24:"App\Models\LogAplicacion";s:4:"Mafi";s:15:"App\Models\Mafi";s:11:"MafiReplica";s:22:"App\Models\MafiReplica";s:14:"MateriasPorVer";s:25:"App\Models\MateriasPorVer";s:7:"Periodo";s:18:"App\Models\Periodo";s:9:"Exception";s:9:"Exception";s:7:"Request";s:23:"Illuminate\Http\Request";s:2:"DB";s:29:"Illuminate\Support\Facades\DB";}}s:43:" phpDocumentor\Reflection\DocBlock location";N;s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:53:"\App\Http\Controllers\MafiController::get_programas()";s:36:" phpDocumentor\Reflection\Fqsen name";s:13:"get_programas";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1093;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1104;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:57:"\App\Http\Controllers\MafiController::Generar_faltantes()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:50:"para generar materias faltantes de los estudiantes";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:0:{}s:42:" phpDocumentor\Reflection\DocBlock context";r:298;s:43:" phpDocumentor\Reflection\DocBlock location";N;s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:57:"\App\Http\Controllers\MafiController::Generar_faltantes()";s:36:" phpDocumentor\Reflection\Fqsen name";s:17:"Generar_faltantes";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1258;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1314;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:60:"\App\Http\Controllers\MafiController::programarPrimerCiclo()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:60:"\App\Http\Controllers\MafiController::programarPrimerCiclo()";s:36:" phpDocumentor\Reflection\Fqsen name";s:20:"programarPrimerCiclo";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:3:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:2:"id";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:1;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:5:"limit";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:2;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:17:"programado_ciclo1";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1317;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1349;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:54:"\App\Http\Controllers\MafiController::materiasPorVer()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:54:"\App\Http\Controllers\MafiController::materiasPorVer()";s:36:" phpDocumentor\Reflection\Fqsen name";s:14:"materiasPorVer";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:3:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:9:"codBanner";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:1;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:5:"ciclo";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:2;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:8:"programa";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1353;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1368;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:53:"\App\Http\Controllers\MafiController::prerequisitos()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:53:"\App\Http\Controllers\MafiController::prerequisitos()";s:36:" phpDocumentor\Reflection\Fqsen name";s:13:"prerequisitos";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:2:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:10:"codMateria";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:1;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:11:"codPrograma";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1370;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1377;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:54:"\App\Http\Controllers\MafiController::sumar_creditos()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:54:"\App\Http\Controllers\MafiController::sumar_creditos()";s:36:" phpDocumentor\Reflection\Fqsen name";s:14:"sumar_creditos";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:1:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:9:"codBanner";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1380;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1395;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:57:"\App\Http\Controllers\MafiController::consulta_creditos()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:57:"\App\Http\Controllers\MafiController::consulta_creditos()";s:36:" phpDocumentor\Reflection\Fqsen name";s:17:"consulta_creditos";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:2:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:9:"codBanner";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:1;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:5:"ciclo";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1397;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1408;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:54:"\App\Http\Controllers\MafiController::reglas_negocio()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:54:"\App\Http\Controllers\MafiController::reglas_negocio()";s:36:" phpDocumentor\Reflection\Fqsen name";s:14:"reglas_negocio";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:4:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:5:"ciclo";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:1;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:8:"programa";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:2;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:4:"ruta";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:3;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:14:"tipoEstudiante";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1410;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1421;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:58:"\App\Http\Controllers\MafiController::esta_en_planeacion()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:58:"\App\Http\Controllers\MafiController::esta_en_planeacion()";s:36:" phpDocumentor\Reflection\Fqsen name";s:18:"esta_en_planeacion";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:2:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:13:"prerequisitos";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:1;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:9:"codBanner";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1423;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1432;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:50:"\App\Http\Controllers\MafiController::Planeacion()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:50:"\App\Http\Controllers\MafiController::Planeacion()";s:36:" phpDocumentor\Reflection\Fqsen name";s:10:"Planeacion";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:7:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:9:"codBanner";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:1;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:5:"ciclo";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:2;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:8:"programa";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:3;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:10:"codMateria";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:4;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:11:"codPrograma";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:5;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:4:"ruta";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:6;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:14:"tipoEstudiante";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1434;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1508;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:55:"\App\Http\Controllers\MafiController::probarfunciones()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:55:"\App\Http\Controllers\MafiController::probarfunciones()";s:36:" phpDocumentor\Reflection\Fqsen name";s:15:"probarfunciones";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1512;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1791;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:56:"\App\Http\Controllers\MafiController::estaEnPlaneacion()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:56:"\App\Http\Controllers\MafiController::estaEnPlaneacion()";s:36:" phpDocumentor\Reflection\Fqsen name";s:16:"estaEnPlaneacion";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:2:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:7:"materia";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:1;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:9:"codBanner";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1794;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1804;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}}s:47:" phpDocumentor\Reflection\Php\Class_ usedTraits";a:0:{}s:45:" phpDocumentor\Reflection\Php\Class_ location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:17;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Class_ endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:1808;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:45:" phpDocumentor\Reflection\Php\Class_ metadata";a:0:{}}}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}s:40:" phpDocumentor\Reflection\Php\File enums";a:0:{}s:43:" phpDocumentor\Reflection\Php\File metadata";a:0:{}}";