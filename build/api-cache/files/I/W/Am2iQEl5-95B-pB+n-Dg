1720923572
waR3U4bTeM%3A7aa54e52e14e10cb42d812db087e9b69-a8b1975516053add00894db710ee208d
s:19572:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6ImE4YjE5NzU1MTYwNTNhZGQwMDg5NGRiNzEwZWUyMDhkIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTU6InJvbGVzLmJsYWRlLnBocCI7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBwYXRoIjtzOjQ0OiJyZXNvdXJjZXMvdmlld3MvdmlzdGFzL2FkbWluL3JvbGVzLmJsYWRlLnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6MTM3NTA6IjwhLS0gaW5jbHVpbW9zIGVsIGhlYWRlciBwYXJhIGVsIGh0bWwgLS0+DQpAaW5jbHVkZSgnbGF5b3V0LmhlYWRlcicpDQoNCjwhLS0gaW5jbHVpbW9zIGVsIG1lbnUgLS0+DQpAaW5jbHVkZSgnbWVudXMubWVudV9hZG1pbicpDQo8IS0tICBjcmVhbW9zIGVsIGNvbnRlbmlkbyBwcmluY2lwYWwgYm9keSAtLT4NCg0KDQo8IS0tIENvbnRlbnQgV3JhcHBlciAtLT4NCjxkaXYgaWQ9ImNvbnRlbnQtd3JhcHBlciIgY2xhc3M9ImQtZmxleCBmbGV4LWNvbHVtbiI+DQoNCiAgICA8IS0tIE1haW4gQ29udGVudCAtLT4NCiAgICA8ZGl2IGlkPSJjb250ZW50Ij4NCg0KICAgICAgICA8IS0tIFRvcGJhciAtLT4NCiAgICAgICAgPG5hdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1leHBhbmQgbmF2YmFyLWxpZ2h0IGJnLXdoaXRlIHRvcGJhciBtYi00IHN0YXRpYy10b3Agc2hhZG93Ij4NCg0KICAgICAgICAgICAgPCEtLSBTaWRlYmFyIFRvZ2dsZSAoVG9wYmFyKSAtLT4NCiAgICAgICAgICAgIDxidXR0b24gaWQ9InNpZGViYXJUb2dnbGVUb3AiIGNsYXNzPSJidG4gYnRuLWxpbmsgZC1tZC1ub25lIHJvdW5kZWQtY2lyY2xlIG1yLTMiPg0KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1iYXJzIj48L2k+DQogICAgICAgICAgICA8L2J1dHRvbj4NCg0KDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCI+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cC1hcHBlbmQiPg0KICAgICAgICAgICAgICAgICAgICA8aDM+IEJpZW52ZW5pZG8ge3sgYXV0aCgpLT51c2VyKCktPm5vbWJyZSB9fTwvaDM+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQoNCg0KICAgICAgICA8L25hdj4NCiAgICAgICAgPCEtLSBFbmQgb2YgVG9wYmFyIC0tPg0KDQogICAgICAgIDwhLS0gQmVnaW4gUGFnZSBDb250ZW50IC0tPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXItZmx1aWQiPg0KDQogICAgICAgICAgICA8IS0tIFBhZ2UgSGVhZGluZyAtLT4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtc20tZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWJldHdlZW4gbWItNCI+DQogICAgICAgICAgICAgICAgPGgxIGNsYXNzPSJoMyBtYi0wIHRleHQtZ3JheS04MDAiPlJvbGVzPC9oMT4NCiAgICAgICAgICAgICAgICB7ey0tIDxhIGhyZWY9IiMiIGNsYXNzPSJkLW5vbmUgZC1zbS1pbmxpbmUtYmxvY2sgYnRuIGJ0bi1zbSBidG4tcHJpbWFyeSBzaGFkb3ctc20iPjxpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYXMgZmEtZG93bmxvYWQgZmEtc20gdGV4dC13aGl0ZS01MCI+PC9pPiBHZW5lcmF0ZSBSZXBvcnQ8L2E+IC0tfX0NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8IS0tIENvbnRlbnQgUm93IC0tPg0KDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KDQogICAgICAgICAgICAgICAgPCEtLSBBcmVhIENoYXJ0IC0tPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14bC0xMiBjb2wtbGctMTIiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIHNoYWRvdyBtYi00Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gQ2FyZCBCb2R5IC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWJsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBpZD0iZXhhbXBsZSIgY2xhc3M9ImRpc3BsYXkiIHN0eWxlPSJ3aWR0aDoxMDAlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQganVzdGlmeS1jb250ZW50LWNlbnRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBocmVmPSIjIiBjbGFzcz0iYWdyZWdhciBidG4gYnRuLXNlY29uZGFyeSIgZGF0YS10b2dnbGU9Im1vZGFsIiBkYXRhLXRhcmdldD0iI251ZXZvUm9sIiBkYXRhLXdoYXRldmVyPSJtb2RhbCI+QWdyZWdhciBudWV2byByb2w8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8IS0tTW9kYWwgcGFyYSBhZ3JhZ2FyIHVuIHJvbCBudWV2by0tPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9Im51ZXZvUm9sIiB0YWJpbmRleD0iLTEiIHJvbGU9ImRpYWxvZyIgYXJpYS1sYWJlbGxlZGJ5PSJleGFtcGxlTW9kYWxMYWJlbCIgYXJpYS1oaWRkZW49InRydWUiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyIgcm9sZT0iZG9jdW1lbnQiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJtb2RhbC10aXRsZSIgaWQ9ImV4YW1wbGVNb2RhbExhYmVsIj5BZ3JlZ2FyIG51ZXZvIHJvbDwvaDU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSI+JnRpbWVzOzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gaWQ9Im1pRm9ybSIgbWV0aG9kPSJwb3N0IiBhY3Rpb249Int7IHJvdXRlKCdyb2wuY3JlYXInKSB9fSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjc3JmDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJtZXNzYWdlLXRleHQiIGNsYXNzPSJjb2wtZm9ybS1sYWJlbCI+Tm9tYnJlIGRlbCByb2w8L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJub21icmUiIG5hbWU9Im5vbWJyZSIgcmVxdWlyZWQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWRhbmdlciIgZGF0YS1kaXNtaXNzPSJtb2RhbCI+Q2FuY2VsYXI8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0iY3JlYXIgYnRuIGJ0bi1zdWNjZXNzIj5DcmVhcjwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPCEtLSAvLmNvbnRhaW5lci1mbHVpZCAtLT4NCg0KICAgIDwvZGl2Pg0KDQo8L2Rpdj4NCjwhLS0gRW5kIG9mIENvbnRlbnQgV3JhcHBlciAtLT4NCg0KPC9kaXY+DQo8IS0tIEVuZCBvZiBQYWdlIFdyYXBwZXIgLS0+DQoNCjwhLS0gU2Nyb2xsIHRvIFRvcCBCdXR0b24tLT4NCjxhIGNsYXNzPSJzY3JvbGwtdG8tdG9wIHJvdW5kZWQiIGhyZWY9IiNwYWdlLXRvcCI+DQogICAgPGkgY2xhc3M9ImZhcyBmYS1hbmdsZS11cCI+PC9pPg0KPC9hPg0KDQo8IS0tIEFsZXJ0YXMgYWwgY3JlYXIgdXN1YXJpbyAtLT4NCkBpZihzZXNzaW9uKCdzdWNjZXNzJykpDQogICAgPHNjcmlwdD4NCiAgICAgICAgU3dhbC5maXJlKCLDiXhpdG8iLCAie3sgc2Vzc2lvbignc3VjY2VzcycpIH19IiwgInN1Y2Nlc3MiKTsNCiAgICA8L3NjcmlwdD4NCkBlbmRpZg0KDQpAaWYoJGVycm9ycy0+YW55KCkpDQogICAgPHNjcmlwdD4NCiAgICAgICAgU3dhbC5maXJlKCJFcnJvciIsICJ7eyAkZXJyb3JzLT5maXJzdCgpIH19IiwgImVycm9yIik7DQogICAgPC9zY3JpcHQ+DQpAZW5kaWYNCg0KPHNjcmlwdD4NCiAgICAvLyAqIERhdGF0YWJsZSBwYXJhIG1vc3RyYXIgdG9kYXMgbGFzIEZhY3VsdGFkZXMgKg0KICAgIHZhciB4bWxodHRwID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7DQogICAgdmFyIHVybCA9ICJ7eyByb3V0ZSgnYWRtaW4uZ2V0cm9sZXMnKSB9fSI7DQogICAgeG1saHR0cC5vcGVuKCJHRVQiLCB1cmwsIHRydWUpOw0KICAgIHhtbGh0dHAuc2VuZCgpOw0KICAgIHhtbGh0dHAub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7DQogICAgICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT0gNCAmJiB0aGlzLnN0YXR1cyA9PSAyMDApIHsNCiAgICAgICAgICAgIHZhciBkYXRhID0gSlNPTi5wYXJzZSh0aGlzLnJlc3BvbnNlVGV4dCk7DQogICAgICAgICAgICB2YXIgdGFibGUgPSAkKCcjZXhhbXBsZScpLkRhdGFUYWJsZSh7DQogICAgICAgICAgICAgICAgImRhdGEiOiBkYXRhLmRhdGEsDQogICAgICAgICAgICAgICAgImNvbHVtbnMiOiBbew0KICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogJ25vbWJyZVJvbCcsDQogICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ1JvbCcNCiAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdENvbnRlbnQ6ICI8YnV0dG9uIHR5cGU9J2J1dHRvbicgY2xhc3M9J2VkaXRhciBidG4gYnRuLXdhcm5pbmcnPjxpIGNsYXNzPSdmYS1zb2xpZCBmYS1wZW4tdG8tc3F1YXJlJz48L2k+PC9idXR0b24+IiwNCiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnRWRpdGFyJywNCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogInRleHQtY2VudGVyIg0KICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiAnYWN0aXZvJywNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRDb250ZW50OiAiIiwNCiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAiRXN0YWRvIiwNCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogInRleHQtY2VudGVyIiwNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcjogZnVuY3Rpb24oZGF0YSwgdHlwZSwgcm93KSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEgPT0gJzEnKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnQWN0aXZvJzsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEgPT0gJzAnKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnSW5hY3Rpdm8nOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogJ2FjdGl2bycsDQogICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0Q29udGVudDogIiIsDQogICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0luYWN0aXZhciAvIEFjdGl2YXInLA0KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAidGV4dC1jZW50ZXIiLA0KICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyOiBmdW5jdGlvbihkYXRhLCB0eXBlLCByb3cpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YSA9PSAnMScpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICI8YnV0dG9uIGNsYXNzPSdpbmFjdGl2YXIgYnRuIGJ0bi1zdWNjZXNzJyB0eXBlPSdidXR0b24nIGlkPSdib3Rvbic+PGkgY2xhc3M9J2ZhLXNvbGlkIGZhLXVubG9jayc+PC9pPjwvYnV0dG9uPiI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhID09ICcwJykgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIjxidXR0b24gY2xhc3M9J2luYWN0aXZhciBidG4gYnRuLWRhbmdlcicgdHlwZT0nYnV0dG9uJyBpZD0nYm90b24nPjxpIGNsYXNzPSdmYS1zb2xpZCBmYS1sb2NrJz48L2k+PC9idXR0b24+IjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBdLA0KICAgICAgICAgICAgICAgICJsYW5ndWFnZSI6IHsNCiAgICAgICAgICAgICAgICAgICAgInVybCI6ICIvL2Nkbi5kYXRhdGFibGVzLm5ldC9wbHVnLWlucy8xLjEwLjE1L2kxOG4vU3BhbmlzaC5qc29uIg0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgLy9sZW5ndGhNZW51OiBbWzEwLCAyNSwgNTAsIDEwMCwgLTFdLCBbMTAsIDI1LCA1MCwgMTAwLCAiQWxsIl1dLA0KICAgICAgICAgICAgfSk7DQogICAgICAgICAgICBjb25zb2xlLmxvZyh0YWJsZSk7DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIG9idGVuZXJfZGF0YV9pbmFjdGl2YXIodGJvZHksIHRhYmxlKSB7DQogICAgICAgICAgICAgICAgJCh0Ym9keSkub24oImNsaWNrIiwgImJ1dHRvbi5pbmFjdGl2YXIiLCBmdW5jdGlvbihldmVudCkgew0KICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHRhYmxlLnJvdygkKHRoaXMpLnBhcmVudHMoInRyIikpLmRhdGEoKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuYWN0aXZvID09IDEpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICLCv0Rlc2VhIGluYWN0aXZhciBlbCByb2wgIiArIGRhdGEubm9tYnJlUm9sICsgIj8iLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246ICd3YXJuaW5nJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dDbG9zZUJ1dHRvbjogdHJ1ZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b25Db2xvcjogJyNEQzM1NDUnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICJObywgQ2FuY2VsYXIiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAiU2kiDQogICAgICAgICAgICAgICAgICAgICAgICB9KS50aGVuKHJlc3VsdCA9PiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC52YWx1ZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLnBvc3QoInt7IHJvdXRlKCdyb2wuaW5hY3RpdmFyJykgfX0iLCB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ190b2tlbic6ICQoJ21ldGFbbmFtZT1jc3JmLXRva2VuXScpLmF0dHIoJ2NvbnRlbnQnKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogZGF0YS5pZCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihyZXN1bHQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPT0gImRlc2hhYmlsaXRhZG8iKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogIlJvbCBkZXNoYWJpbGl0YWRvIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWw6ICJFbCBSb2wgPHN0cm9uZz4iICsgZGF0YS5ub21icmVSb2wgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI8L3N0cm9uZz4gaGEgc2lkbyBpbmFjdGl2YWRvIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246ICdpbmZvJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogIkFjZXB0YXIiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS50aGVuKHJlc3VsdCA9PiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnZhbHVlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICLCv0Rlc2VhIGFjdGl2YXIgZWwgcm9sICIgKyBkYXRhLm5vbWJyZVJvbCArICI/IiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiAnd2FybmluZycsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93Q2xvc2VCdXR0b246IHRydWUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uQ29sb3I6ICcjREMzNTQ1JywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiAiTm8sIENhbmNlbGFyIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogIlNpIg0KICAgICAgICAgICAgICAgICAgICAgICAgfSkudGhlbihyZXN1bHQgPT4gew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQudmFsdWUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5wb3N0KCJ7eyByb3V0ZSgncm9sLmFjdGl2YXInKSB9fSIsIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnX3Rva2VuJzogJCgnbWV0YVtuYW1lPWNzcmYtdG9rZW5dJykuYXR0cignY29udGVudCcpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBkYXRhLmlkLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHJlc3VsdCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPT0gImhhYmlsaXRhZG8iKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogIlJvbCBoYWJpbGl0YWRvIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWw6ICJFbCByb2wgPHN0cm9uZz4iICsgZGF0YS5ub21icmVSb2wgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI8L3N0cm9uZz4gaGEgc2lkbyBoYWJpbGl0YWRvIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246ICdpbmZvJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogIkFjZXB0YXIiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS50aGVuKHJlc3VsdCA9PiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnZhbHVlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLy8gRnVuY2nDs24gcGFyYSBlZGl0YXIgUm9sDQogICAgICAgICAgICBmdW5jdGlvbiBvYnRlbmVyX2RhdGFfZWRpdGFyKHRib2R5LCB0YWJsZSkgew0KICAgICAgICAgICAgICAgICQodGJvZHkpLm9uKCJjbGljayIsICJidXR0b24uZWRpdGFyIiwgZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gdGFibGUucm93KCQodGhpcykucGFyZW50cygidHIiKSkuZGF0YSgpOw0KICAgICAgICAgICAgICAgICAgICAkKCcjZmFjdWx0YWRFZGl0YXInKS52YWwoZGF0YS5pZEZhY3VsdGFkKTsNCiAgICAgICAgICAgICAgICAgICAgY29uc3Qgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZhY3VsdGFkDQogICAgICAgICAgICAgICAgICAgIH0gPSBTd2FsLmZpcmUoew0KICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdBY3R1YWxpemFyIGluZm9ybWFjacOzbicsDQogICAgICAgICAgICAgICAgICAgICAgICBodG1sOiAnPGZvcm0+JyArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0ibm9tYnJlUm9sIiBuYW1lPSJub21icmVSb2wiIHZhbHVlPSInICsgZGF0YS5ub21icmVSb2wgKyAnIiBjbGFzcz0iZm9ybS1jb250cm9sIiBwbGFjZWhvbGRlcj0ibm9tYnJlIFJvbCI+IDxicj4nLA0KICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogJ2luZm8nLA0KICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSwNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogJyMzMDg1ZDYnLA0KICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uQ29sb3I6ICcjZDMzJywNCiAgICAgICAgICAgICAgICAgICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICJDYW5jZWxhciIsDQogICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ0VkaXRhcicNCiAgICAgICAgICAgICAgICAgICAgfSkudGhlbihyZXN1bHQgPT4gew0KICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coMSk7DQogICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQpOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC52YWx1ZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGZhY3VsdGFkKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLnBvc3QoInt7IHJvdXRlKCdyb2wudXBkYXRlJyl9fSIsIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdfdG9rZW4nOiAkKCdtZXRhW25hbWU9Y3NyZi10b2tlbl0nKS5hdHRyKCdjb250ZW50JyksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogZW5jb2RlVVJJQ29tcG9uZW50KHdpbmRvdy5idG9hKGRhdGEuaWQpKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vbWJyZTogJChkb2N1bWVudCkuZmluZCgnI25vbWJyZVJvbCcpLnZhbCgpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihyZXN1bHQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09ICJhY3R1YWxpemFkbyIpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTd2FsLmZpcmUoew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogIkluZm9ybWFjacOzbiBhY3R1YWxpemFkYSIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246ICdzdWNjZXNzJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4ocmVzdWx0ID0+IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICkNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIG9idGVuZXJfZGF0YV9lZGl0YXIoIiNleGFtcGxlIHRib2R5IiwgdGFibGUpOw0KICAgICAgICAgICAgb2J0ZW5lcl9kYXRhX2luYWN0aXZhcigiI2V4YW1wbGUgdGJvZHkiLCB0YWJsZSk7DQogICAgICAgIH0NCiAgICB9DQo8L3NjcmlwdD4NCkBpbmNsdWRlKCdsYXlvdXQuZm9vdGVyJykiO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fXM6NDA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZW51bXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbWV0YWRhdGEiO2E6MDp7fX0=";